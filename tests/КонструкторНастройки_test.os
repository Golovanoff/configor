#использовать "../"
#Использовать asserts
#Использовать logos
#Использовать tempfiles
#Использовать json

Перем юТест;
Перем Лог;

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт

	юТест = Тестирование;

	ИменаТестов = Новый Массив;

	ИменаТестов.Добавить("ТестДолжен_ПроверитьЧтениеПараметровИзКонструктора");
	// ИменаТестов.Добавить("ТестДолжен_ПроверитьВыгрузкуПараметровВКласс");
	// ИменаТестов.Добавить("ТестДолжен_ПроверитьПоискИЧтениеФайлаПараметров");
	// ИменаТестов.Добавить("ТестДолжен_ПроверитьПарсингОпций");
	// ИменаТестов.Добавить("ТестДолжен_ПроверитьПарсингМассивовОпций");

	Возврат ИменаТестов;

КонецФункции

Процедура ТестДолжен_ПроверитьЧтениеПараметровИзКонструктора() Экспорт
	
	МенеджерПараметров = Новый МенеджерПараметров();
	Конструктор = МенеджерПараметров.НовыйКонструкторПараметров();

	ПараметрОбъект = Конструктор.НоваяНастройка("ПростойОбъект")
				.ПолеСтрока("Поле1")
				.ПолеСтрока("Поле2");

	ПараметрСтруктура = Конструктор.НоваяНастройка("ВложеннаяСтруктура")
				.ПолеСтрока("СтрокаСтруктуры")
				.ПолеДата("ДатаСтруктуры", ТекущаяДата())
				.ПолеЧисло("ЧислоСтруктуры")
				.ПолеОбъект("Объект", ПараметрОбъект)
				.ПолеМассив("МассивСтрок", Тип("Строка"))
				.ПолеМассив("МассивЧисел", Тип("Число"))
				.ПолеМассив("МассивДат", Тип("Дата"))
				.ПолеМассив("МассивОбъектов", ПараметрОбъект);

	Конструктор.ПолеСтрока("Версия version")
				.ПолеСтрока("СтрокаНастройки")
				.ПолеДата("ДатаНастройки", ТекущаяДата())
				.ПолеЧисло("ЧислоНастройки")
				.ПолеОбъект("ПараметрСтруктура struct", ПараметрСтруктура)
				.ПолеМассив("МассивОбъектов array-struct", ПараметрОбъект)
				.ПолеМассив("МассивСтрок", Тип("Строка"))
				.ПолеМассив("МассивЧисел", Тип("Число"))
				.ПолеМассив("МассивДат", Тип("Дата"))
				;
	
	СтруктураПараметров = Новый Структура("version, СтрокаНастройки, ДатаНастройки, ЧислоНастройки, МассивСтрок, МассивЧисел, ПараметрСтруктура, ПараметрСоответствие", 
		"1.0",
		"ПростоСтрока", 
		Дата(2017, 1, 1),
		10, 
		ПолучитьНовыйМассив("Элемент1, Элемент2, Элемент3"),
		ПолучитьНовыйМассив("1, 2, 3"),
		Новый Структура("СтрокаСтруктуры, ЧислоСтруктуры, МассивСтрок, Объект, Соответствие", 
			"ПростоСтрока", 
			10, 
			ПолучитьНовыйМассив("Элемент1, Элемент2, Элемент3"),
			Новый Структура("Поле1, Поле2", "ЗначениеСтруктуры", "ЗначениеСтруктуры2"),
			ПолучитьСоответствие("КлючВнутри1, КлючВнутри2", "Значение1, Значение2")
			), 
		ПолучитьСоответствие("Ключ1, Ключ2", "Значение1, Значение2")
	);

	ПарсерJSON = Новый ПарсерJSON;
	ТекстФайлаПроверки = ПарсерJSON.ЗаписатьJSON(СтруктураПараметров);

	ТестовыйФайл = ПодготовитьТестовыйФайл(ТекстФайлаПроверки);

	ТестовоеИмя = "config";
	ТестовоеРасширение = ".json";

	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();
	КопироватьФайл(ТестовыйФайл, ОбъединитьПути(ВременныйКаталог, ТестовоеИмя + ТестовоеРасширение));

	МенеджерПараметров.УстановитьИмяФайла(ТестовоеИмя);
	МенеджерПараметров.ДобавитьКаталогПоиска(ВременныйКаталог);

	МенеджерПараметров.Прочитать();
	
КонецПроцедуры

Функция ПодготовитьТестовыйФайл(Знач ТестФайла)

	ТестовыйФайл = ВременныеФайлы.НовоеИмяФайла("json");
	
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ТестовыйФайл);
	ЗаписьТекста.ЗаписатьСтроку(ТестФайла);
	ЗаписьТекста.Закрыть();

	Возврат ТестовыйФайл;

КонецФункции

Функция ПолучитьНовыйМассив(ЗначенияМассив)

	Массив = Новый Массив();

	МассивЗначений = СтрРазделить(ЗначенияМассив, ", ");

	Для ИндексКлюча = 0 По МассивЗначений.ВГраница() Цикл
		
		Массив.Добавить(МассивЗначений[ИндексКлюча]);

	КонецЦикла;

	Возврат Массив;

КонецФункции

Функция ПолучитьСоответствие(Ключи, Значения)

	Соответствие = Новый Соответствие();

	МассивКлючей = СтрРазделить(Ключи, ", ");
	МассивЗначений = СтрРазделить(Значения, ", ");

	Для ИндексКлюча = 0 По МассивКлючей.ВГраница() Цикл
		
		Соответствие.Вставить(МассивКлючей[ИндексКлюча], МассивЗначений[ИндексКлюча]);

	КонецЦикла;

	Возврат Соответствие;

КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.lib.configor");
Лог.УстановитьУровень(УровниЛога.Отладка);

ЛогПровайдера = Логирование.ПолучитьЛог("oscript.lib.configor.provider-json");
ЛогПровайдера.УстановитьУровень(УровниЛога.Отладка);