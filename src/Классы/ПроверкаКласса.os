#Использовать logos

Перем Лог;

Перем ТаблицаПроверки;
Перем РефлекторПроверки;
Перем ОбъектПроверки;
Перем ТаблицаМетодов;

Перем Сброс;

Процедура ПриСозданииОбъекта(НовыйОбъектПроверки = Неопределено)

	ОбъектПроверки = НовыйОбъектПроверки;

	РефлекторПроверки = Новый Рефлектор;

	Сброс = Истина;

КонецПроцедуры

Процедура УстановитьОбъектПроверки(НовыйОбъектПроверки) Экспорт
	
	ОбъектПроверки = НовыйОбъектПроверки;
	Сброс = Истина;

КонецПроцедуры

Функция ЕстьФункция(ИмяФункции, КоличествоПараметров = 0) Экспорт

	Возврат ПроверитьМетодКласса(ИмяФункции, КоличествоПараметров, Истина);

КонецФункции

Функция ЕстьПроцедура(ИмяПроцедуры, КоличествоПараметров = 0) Экспорт

	Возврат ПроверитьМетодКласса(ИмяПроцедуры, КоличествоПараметров);

КонецФункции

Процедура ОбязательнаяПроцедура(ИмяПроцедуры, КоличествоПараметров = 0) Экспорт

	Если НЕ ЕстьПроцедура(ИмяПроцедуры, КоличествоПараметров) Тогда
		Лог.КритичнаяОшибка("Класс <%1> не реализует обязательной процедуры <%2> c количеством параметров <%3>", ОбъектПроверки, ИмяПроцедуры, КоличествоПараметров);
		ВызватьИсключение "Ошибка проверки обязательной процедуры";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбязательнаяФункция(ИмяФункции, КоличествоПараметров = 0) Экспорт

	Если НЕ ЕстьФункция(ИмяФункции, КоличествоПараметров) Тогда
		Лог.КритичнаяОшибка("Класс <%1> не реализует обязательной функции <%2> c количеством параметров <%3>", ОбъектПроверки, ИмяФункции, КоличествоПараметров);
		ВызватьИсключение "Ошибка проверки обязательной процедуры";
	КонецЕсли;
	
КонецПроцедуры

Функция РеализуетИнтерфейс(Интерфейс, ВызватьИсключениеРеализации = Ложь) Экспорт
	
	Если Сброс Тогда
		ПрочитатьТаблицуОбъекта();
	КонецЕсли;

	ИнтерфейсРеализован = Интерфейс.Реализован(ТаблицаМетодов);

	Если Не ИнтерфейсРеализован 
		И ВызватьИсключениеРеализации Тогда
		ВызватьИсключение "Не реализован требуемый интерфейс";
	КонецЕсли;

	Возврат ИнтерфейсРеализован;

КонецФункции

Функция РеализованныеМетодыИнтерфейса(Интерфейс) Экспорт
	
	Если Сброс Тогда
		ПрочитатьТаблицуОбъекта();
	КонецЕсли;

	Возврат Интерфейс.РеализованныеМетоды(ОбъектПроверки);

КонецФункции

Процедура ПрочитатьТаблицуОбъекта()
	
	Если ОбъектПроверки = Неопределено Тогда
		ТаблицаМетодов = Новый ТаблицаЗначений;
		Возврат;
	КонецЕсли;

	ТаблицаМетодов = РефлекторПроверки.ПолучитьТаблицуМетодов(ОбъектПроверки);

	Сброс = Ложь;

КонецПроцедуры

Функция ПроверитьПоТаблицеМетодов(ИмяМетода, ТребуемоеКоличествоПараметров, ЭтоФункция = Ложь)
	
	Если Сброс Тогда
		ПрочитатьТаблицуОбъекта();
	КонецЕсли;

	Если ТаблицаМетодов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	СтрокаМетода = ТаблицаМетодов.Найти(ИмяМетода, "Имя");
	Лог.Отладка("Поиск строки в таблице методов класса <%1> найдена: %2, общее количество методов класса: %3", 
				ОбъектПроверки,
				НЕ СтрокаМетода = Неопределено,
				ТаблицаМетодов.Количество());
	Если СтрокаМетода = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ПроверкаНаФункцию = ЭтоФункция = СтрокаМетода.ЭтоФункция;
	ПроверкаНаКоличествоПараметров = ТребуемоеКоличествоПараметров = СтрокаМетода.КоличествоПараметров;

	Лог.Отладка("Проверяемый метод <%1> корректен: %2", ИмяМетода, ПроверкаНаФункцию И ПроверкаНаКоличествоПараметров);
	Возврат ПроверкаНаФункцию
		И ПроверкаНаКоличествоПараметров;

КонецФункции

Функция ПроверитьМетодКласса(Знач ИмяМетода, Знач ТребуемоеКоличествоПараметров = 0, Знач ЭтоФункция = Ложь)

	Если ОбъектПроверки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ПроверяемыйКласс = ОбъектПроверки;

	ЕстьМетод = РефлекторПроверки.МетодСуществует(ПроверяемыйКласс, ИмяМетода);
	Лог.Отладка("Проверяемый метод <%1> найден: %2", ИмяМетода, ЕстьМетод);
	Если Не ЕстьМетод Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат ПроверитьПоТаблицеМетодов(ИмяМетода, ТребуемоеКоличествоПараметров, ЭтоФункция);

КонецФункции // ПроверитьМетодУКласса()

Лог = Логирование.ПолучитьЛог("oscript.lib.configor.reflector");
//Лог.УстановитьУровень(УровниЛога.Отладка)