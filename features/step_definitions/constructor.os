// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd
#Использовать asserts
#Использовать json

Перем БДД; //контекст фреймворка 1bdd

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯПодключаюТестовыйКлассОписаниеПараметров");
	ВсеШаги.Добавить("ЗначениеПараметраКлассаРавно");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт
	
КонецПроцедуры

//Я подключаю тестовый класс описание параметров
Процедура ЯПодключаюТестовыйКлассОписаниеПараметров() Экспорт

	КлассПараметров = ПодготовитьТестовыйКласс();
	МенеджерПараметров = БДД.ПолучитьИзКонтекста("МенеджерПараметров");
	МенеджерПараметров.КонструкторПараметров(КлассПараметров);

	БДД.СохранитьВКонтекст("КлассПараметров", КлассПараметров);

КонецПроцедуры

//Прочитанные параметры равны файлу ".config.yaml" в каталоге проекта
Процедура ПрочитанныеПараметрыРавныФайлуВКаталогеПроекта(Знач ИмяФайлаПараметров) Экспорт

	КаталогПроекта = БДД.ПолучитьИзКонтекста("КаталогПроекта");

	Чтение = Новый ЧтениеТекста(ОбъединитьПути(КаталогПроекта, ИмяФайлаПараметров), КодировкаТекста.UTF8);
	ТекстФайлаПараметров = Чтение.Прочитать();
	Чтение.Закрыть();

	КлассПараметров = БДД.ПолучитьИзКонтекста("КлассПараметров");
	ПараметрыКласса = КлассПараметров.Параметры();

	ПарсерJSON = Новый ПарсерJSON;
	
	ПараметрыКласса = КлассПараметров.Параметры();
	ТекстПроверки = ПарсерJSON.ЗаписатьJSON(ПараметрыКласса);

	Утверждения.ПроверитьРавенство(ТекстФайлаПараметров, ТекстПроверки, "Результат должен совпадать с ожиданиями.");

КонецПроцедуры

//Значение параметра класса "releases.repo.owner" равно "owner"
Процедура ЗначениеПараметраКлассаРавно(Знач ИмяПараметра, Знач ТребуемоеЗначениеПараметра) Экспорт

	КлассПараметров = БДД.ПолучитьИзКонтекста("КлассПараметров");
	ПараметрыКласса = КлассПараметров.Параметры();

	ЗначениеПараметра = ПолучитьЗначениеКлюча(ИмяПараметра, ПараметрыКласса);
	Утверждения.ПроверитьРавенство(ЗначениеПараметра, ТребуемоеЗначениеПараметра, "Результат должен совпадать с ожиданиями");

КонецПроцедуры

Функция ПолучитьЗначениеКлюча(ИмяКлюча, Параметры)

	МассивКлючей = СтрРазделить(ИмяКлюча, ".", Ложь);

	ЗначениеКлюча = Неопределено;

	ПервыйПроход = Истина;

	Для каждого Ключ Из МассивКлючей Цикл

		Если ПервыйПроход Тогда
			ЗначениеКлюча = Параметры[Ключ];
			ПервыйПроход = Ложь;
		Иначе
			ЗначениеКлюча = ЗначениеКлюча[Ключ];
		КонецЕсли;
		
	КонецЦикла;

	Возврат ЗначениеКлюча;

КонецФункции

Функция КаталогFixtures()
	Возврат ОбъединитьПути(КаталогБиблиотеки(), "tests", "fixtures");
КонецФункции

Функция КаталогБиблиотеки()
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..", "..");
КонецФункции

Функция ПодготовитьТестовыйКласс()

	Возврат ЗагрузитьСценарий(ОбъединитьПути(КаталогFixtures(), "ТестовыйКласс.os"));

КонецФункции
