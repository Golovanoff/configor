#Использовать fluent
#Использовать notify

Перем ПутьКФайлуПараметров; // Строка
Перем КаталогиПоиска; // Массив
Перем РасширенияФайлаПараметров; // Массив
Перем НаименованияФайлаПараметров; // Массив
Перем КлассПровайдера; // Объект

Перем ИндексКаталоговПоиска; // Соответствие
Перем НастройкиПровайдера; // Структура

Перем РезультатЧтения; // Соответствие

Перем НаправлениеСортировки; // Строка
Перем ЧитатьТолькоОдинФайл; // Булево

Перем ПрефиксКлючаДляЧтенияВложенногоФайлаНастроек; // Строка, По умолчанию 

Перем Лог;

#Область Интерфейс_провайдера_параметров

// Возвращает тип провайдера
//
//  Возвращаемое значение:
//   Строка - текущий тип провайдера
//
Функция ТипПровайдера() Экспорт

	Возврат КлассПровайдера.ТипПровайдера();

КонецФункции

// Возвращает идентификатор провайдера
//
//  Возвращаемое значение:
//   Строка - текущий идентификатор провайдера
//
Функция Идентификатор() Экспорт

	Возврат КлассПровайдера.Идентификатор();

КонецФункции

// Возвращает приоритет провайдера
//
//  Возвращаемое значение:
//   Число - текущий приоритет провайдера
//
Функция Приоритет() Экспорт

	Возврат КлассПровайдера.Приоритет();

КонецФункции

// Выполняет чтение параметров для провайдера
//
// Параметры:
//   НастройкиПровайдера - Структура - структура настроек провайдера
//
//  Возвращаемое значение:
//   Соответствие - результат чтения провайдера
//
Функция ПрочитатьПараметры(Знач ВходящиеНастройкиПровайдера) Экспорт

	ПрочитатьНастройки(ВходящиеНастройкиПровайдера);

	НастройкиПровайдера = ВходящиеНастройкиПровайдера;

	Возврат ПрочитатьПараметрыПоНастройкам();

КонецФункции

// Выполняет запись данных провайдера
//
// Параметры:
//   НастройкиПровайдера - Структура - структура настроек провайдера
//
Процедура ЗаписатьПараметры(Знач НастройкиПровайдера) Экспорт

	КлассПровайдера.ЗаписатьПараметры(НастройкиПровайдера);

КонецПроцедуры

#КонецОбласти

#Область Дополнительные_экспортные_процедуры

// <Описание процедуры>
//
// Параметры:
//   ВходящиеРасширениеФайлов - <Тип.Вид> - <описание параметра>
//
Процедура ДобавитьРасширениеФайла(Знач ВходящиеРасширениеФайлов) Экспорт
	РасширенияФайлаПараметров.Добавить(ВходящиеРасширениеФайлов);
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//   ВходящееНаименованиеФайла - <Тип.Вид> - <описание параметра>
//
Процедура ДобавитьНаименованиеФайла(Знач ВходящееНаименованиеФайла) Экспорт
	НаименованияФайлаПараметров.Добавить(ВходящееНаименованиеФайла);
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции

Процедура УстановитьНаправлениеСортировки(ВходящееНаправлениеСортировки)

	Если НЕ НаправлениеСортировкиКорректное(ВходящееНаправлениеСортировки) Тогда
		ВызватьИсключение СтрШаблон("Переданная <%1> сортировка не корректная", ВходящееНаправлениеСортировки);
	КонецЕсли;

	НаправлениеСортировки = ВходящееНаправлениеСортировки;

КонецПроцедуры

Функция НаправлениеСортировкиКорректное(ТекстНаправлениеСортировки)

	Возврат ВРег(ТекстНаправлениеСортировки) = ВРег("ВОЗР")
			ИЛИ ВРег(ТекстНаправлениеСортировки) = ВРег("УБЫВ")
			;

КонецФункции

Процедура ДобавитьКаталогПоискаВИндекс(КаталогПоиска, Приоритет, НаименованиеФайла, РасширениеФайла)

	ИндексКаталоговПоиска.Добавить(Новый КаталогПоискаФайла(КаталогПоиска, НаименованиеФайла, РасширениеФайла, Приоритет));

КонецПроцедуры

Функция ПрочитатьПараметрыПоНастройкам()

	РезультатЧтения = Новый Соответствие;

	Если ЗначениеЗаполнено(ПутьКФайлуПараметров) Тогда
		ВыполнитьЧтениеФайловогоПровайдера(ПутьКФайлуПараметров);
	Иначе
		ВыполнитьПоискИЧтениеФайловПараметров();
	КонецЕсли;
	
	Возврат РезультатЧтения;

КонецФункции

Процедура ВыполнитьПоискИЧтениеФайловПараметров()

	ИндексКаталоговПоиска = Новый Массив;

	СформироватьИндексКаталогПоиска();
	
	ФункцияСортировки = Новый ОписаниеОповещения("СортироватьКаталогиПоискаФайлов", ЭтотОбъект);

	КоллекцияФайловПараметров = Новый ПроцессорКоллекций;
	КоллекцияФайловПараметров.УстановитьКоллекцию(ИндексКаталоговПоиска);

	КоличествоФайлов = КоллекцияФайловПараметров
			.Сортировать(ФункцияСортировки)
			.Фильтровать("Результат = Элемент.ПоискФайла()")
			.Количество();

	Если КоличествоФайлов = 0 Тогда
		
		Возврат;

	ИначеЕсли ЧитатьТолькоОдинФайл
		ИЛИ КоличествоФайлов = 1 Тогда

		КаталогПоискаФайла = КоллекцияФайловПараметров.ПолучитьПервый();
		ВыполнитьЧтениеФайловогоПровайдера(КаталогПоискаФайла.ИмяФайла());

	Иначе
	
		ФункцияОбработки = Новый ОписаниеОповещения("ОбработчикВыполненияЧтениеФайловогоПровайдера", ЭтотОбъект);
		КоллекцияФайловПараметров.ДляКаждого(ФункцияОбработки);

	КонецЕсли;

	ОбработатьШаблонныеПодстановки(РезультатЧтения);
	
КонецПроцедуры

Процедура СформироватьИндексКаталогПоиска()

	Для ИИ = 0 По КаталогиПоиска.ВГраница() Цикл

		Для каждого РасширениеФайла Из РасширенияФайлаПараметров Цикл

			Для каждого НаименованиеФайла Из НаименованияФайлаПараметров Цикл

				ДобавитьКаталогПоискаВИндекс(КаталогиПоиска[ИИ], ИИ, НаименованиеФайла, РасширениеФайла);

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьЧтениеФайловогоПровайдера(Знач ИмяФайлаПараметров)

	РезультатЧтенияФайла = ВыполнитьЧтениеПровайдера(ИмяФайлаПараметров);

	ОбработатьПараметрыРекурсивно(РезультатЧтения, ИмяФайлаПараметров);

	ОбъединитьРезультаты(РезультатЧтения, РезультатЧтенияФайла);

КонецПроцедуры

Функция ВыполнитьЧтениеПровайдера(Знач ИмяФайлаПараметров)
	
	НастройкаПровайдераДляТекущегоЧтения = СкопироватьСтруктуру(НастройкиПровайдера);
	НастройкаПровайдераДляТекущегоЧтения.Вставить("ФайлПараметров", ИмяФайлаПараметров);

	РезультатЧтенияФайла = КлассПровайдера.ПрочитатьПараметры(НастройкаПровайдераДляТекущегоЧтения);

	Возврат РезультатЧтенияФайла;

КонецФункции

// Обработчик сортировки каталогов поиска файлов
//
// Параметры:
//   Результат - Объект.КаталогПоискаФайла - Элемент массива каталогов поиска
//   ДополнительныеПараметры - Структура - дополнительная структура
//
Процедура СортироватьКаталогиПоискаФайлов(Результат, ДополнительныеПараметры) Экспорт

	Если ВРЕГ(НаправлениеСортировки) = ВРег("УБЫВ") Тогда
		Результат = ДополнительныеПараметры.Элемент1.Приоритет() < ДополнительныеПараметры.Элемент2.Приоритет();
	Иначе
		Результат = ДополнительныеПараметры.Элемент1.Приоритет() > ДополнительныеПараметры.Элемент2.Приоритет();
	КонецЕсли;

КонецПроцедуры

// Обработчик выполнения чтения файлового провайдера
//
// Параметры:
//   Результат - Объект.КаталогПоискаФайла - Элемент массива каталогов поиска
//   ДополнительныеПараметры - Структура - дополнительная структура
//
Процедура ОбработчикВыполненияЧтениеФайловогоПровайдера(Результат, ДополнительныеПараметры) Экспорт

	КаталогПоиска = ДополнительныеПараметры.Элемент;

	ВыполнитьЧтениеФайловогоПровайдера(КаталогПоиска.ИмяФайла());

КонецПроцедуры

Процедура ОбъединитьРезультаты(ОсновноеСоответствие, ДобавляемоеСоответствие)

	Для каждого Элемент Из ДобавляемоеСоответствие Цикл
		ОсновноеСоответствие.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;

КонецПроцедуры

Функция СкопироватьМассив(ВходящийМассив)

	НовыйМассив = Новый Массив;

	Для каждого Элемент Из ВходящийМассив Цикл
		НовыйМассив.Добавить(Элемент);
	КонецЦикла;

	Возврат НовыйМассив;

КонецФункции

Функция СкопироватьСтруктуру(ВходящаяСтруктура)
	НоваяСтруктура = Новый Структура;

	Для каждого КлючЗначение Из ВходящаяСтруктура Цикл
		НоваяСтруктура.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;

	Возврат НоваяСтруктура;
КонецФункции

Процедура ПрочитатьНастройки(Знач НастройкиПровайдера)

	ПервичныйКаталогПараметров = НастройкиПровайдера.ПервичныйКаталогПараметров;
	ВторичныйКаталогПараметров = НастройкиПровайдера.ВторичныйКаталогПараметров;
	ДополнительныеКаталогиПоиска = НастройкиПровайдера.КаталогиПоиска;

	Если НастройкиПровайдера.Свойство("РасширенияФайлаПараметров")
		И НастройкиПровайдера.РасширенияФайлаПараметров.Количество() > 0 Тогда
		РасширенияФайлаПараметров = НастройкиПровайдера.РасширенияФайлаПараметров;
	КонецЕсли;

	Если НастройкиПровайдера.Свойство("НаименованияФайлаПараметров") Тогда
		НаименованияФайлаПараметров = НастройкиПровайдера.НаименованияФайлаПараметров;
	КонецЕсли;

	Если ЗначениеЗаполнено(НастройкиПровайдера.ПутьКФайлуПараметров) Тогда
		ПутьКФайлуПараметров = НастройкиПровайдера.ПутьКФайлуПараметров;
	КонецЕсли;

	КаталогиПоиска = СкопироватьМассив(ДополнительныеКаталогиПоиска);
	КаталогиПоиска.Вставить(0, ПервичныйКаталогПараметров);
	КаталогиПоиска.Вставить(1, ВторичныйКаталогПараметров);

	УстановитьНаправлениеСортировки(НастройкиПровайдера.НаправлениеСортировки);

КонецПроцедуры

#КонецОбласти

#Область Чтение_Вложенных_файлов

Процедура ОбработатьПараметрыРекурсивно(Источник, Знач ИмяФайлаПараметров)
	
	ПрефиксПараметрФайл = ПрефиксКлючаДляЧтенияВложенногоФайлаНастроек;
	
	ПутьКаталогаФайла = Новый Файл(ИмяФайлаПараметров).Путь;

	КлючиКДополнительномуЧтению = Новый Массив;

	Для каждого КлючЗначение Из Источник Цикл
		
		Ключ = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;

		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда

			ОбработатьПараметрыРекурсивно(Значение, ПутьКаталогаФайла);

		Иначе
			Лог.Отладка("Ищю ключ чтения файла: <%1>", Ключ);
			Если СтрНачинаетсяС( ВРег(Ключ), ВРег(ПрефиксПараметрФайл)) Тогда
				КлючиКДополнительномуЧтению.Добавить(Ключ);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Для каждого Ключ Из КлючиКДополнительномуЧтению Цикл
		
		Значение = Источник[Ключ];
		
		ПрочитатьФайлИзЗначенияПараметра(Ключ, Значение, ПутьКаталогаФайла, Источник);
		
		Источник.Удалить(Ключ);

	КонецЦикла;

КонецПроцедуры

Функция ПрочитатьФайлИзЗначенияПараметра( Ключ, Значение, ПутьКаталогаФайла, Приемник)
	ПрефиксПараметрФайл = ПрефиксКлючаДляЧтенияВложенногоФайлаНастроек;
	ЕстьПараметрФайл = СтрНачинаетсяС( ВРег(Ключ), ВРег(ПрефиксПараметрФайл) );

	Если НЕ ЕстьПараметрФайл Тогда
		Возврат Ложь;
	КонецЕсли;

	Лог.Отладка("Нашли ключ файла <%1>, значение <%2>, путь каталога-родителя <%3>", Ключ, Значение, ПутьКаталогаФайла);

	ПутьФайла = ОбъединитьПути(ПутьКаталогаФайла, Значение);
	Параметры = ВыполнитьЧтениеПровайдера(ПутьФайла);

	ОбработатьПараметрыРекурсивно(Параметры, ПутьКаталогаФайла);
		
	Для каждого КлючЗначение Из Параметры Цикл
		
		Ключ = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;
	
		Приемник.Вставить(Ключ, Значение);

	КонецЦикла;
	
	Возврат Истина;
КонецФункции // ПрочитатьФайлИзЗначенияПараметра( Ключ, Значение, ПутьКаталогаФайла, Приемник)

Процедура ОбработатьШаблонныеПодстановки(Параметры)

	РегулярноеВыражение = Новый РегулярноеВыражение( "%([^%]*)%" );

	КоличествоПопыток = 5;

	Для Счетчик = 1 По КоличествоПопыток Цикл

		МассивПодстановок = Новый Массив;

		НайтиШаблонныеПодстановки(Параметры, МассивПодстановок, РегулярноеВыражение);

		Если НЕ ЗначениеЗаполнено(МассивПодстановок) Тогда
			Прервать;
		КонецЕсли;

		ЗначенияКлючей = Новый Соответствие;
		НайтиВсеКлючи(Параметры, ЗначенияКлючей);

		ВыполнитьПодстановки(МассивПодстановок, ЗначенияКлючей);

	КонецЦикла;

КонецПроцедуры

Процедура НайтиШаблонныеПодстановки(Параметры, Знач МассивПодстановок, Знач РегулярноеВыражение)

	Для каждого КлючЗначение Из Параметры Цикл
		Значение = КлючЗначение.Значение;
		Тип = ТипЗнч(Значение);
		Если Тип = Тип("Строка") Тогда
			КоллекцияСовпадений = РегулярноеВыражение.НайтиСовпадения( Значение );
			Если КоллекцияСовпадений.Количество() > 0 Тогда
				Описание = Новый Структура("Ключ, Параметры", КлючЗначение.Ключ, Параметры);
				Описание.Вставить("КоллекцияСовпадений", КоллекцияСовпадений);
				МассивПодстановок.Добавить(Описание);

				Лог.Отладка("Нашли значение для подстановки <%1>", Значение);
			КонецЕсли;

		ИначеЕсли Тип = Тип("Соответствие") Тогда
			НайтиШаблонныеПодстановки(Значение, МассивПодстановок, РегулярноеВыражение);
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьПодстановки(МассивПодстановок, ЗначенияКлючей)
	Для каждого ОписаниеПодстановки Из МассивПодстановок Цикл
		КлючПодстановки = ОписаниеПодстановки.Ключ;

		КоллекцияСовпадений = ОписаниеПодстановки.КоллекцияСовпадений;
		Для каждого Совпадение Из КоллекцияСовпадений Цикл
			Значение = Совпадение.Значение;
			ИмяКлюча = Совпадение.Группы[1].Значение;
			Лог.Отладка("Нашли имя ключа <%1> для возможной подстановки в <%2>", ИмяКлюча, Значение);

			ЗначениеПоКлючу = ЗначенияКлючей[ИмяКлюча];
			Если ЗначениеПоКлючу <> Неопределено Тогда
				ОписаниеПодстановки.Параметры.Вставить(КлючПодстановки, ЗначениеПоКлючу);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура НайтиВсеКлючи(Параметры, ЗначенияКлючей)
	Для каждого КлючЗначение Из Параметры Цикл
		Ключ = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;

		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда
			НайтиВсеКлючи(Значение, ЗначенияКлючей);
		Иначе
			ЗначенияКлючей.Вставить(Ключ, Значение);
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

#КонецОбласти

Процедура ПриСозданииОбъекта(Знач ВходящийКлассПровайдера)

	ПрефиксКлючаДляЧтенияВложенногоФайлаНастроек = "ReadFile";

	РасширенияФайлаПараметров = Новый Массив;
	НаименованияФайлаПараметров = Новый Массив;
	КаталогиПоиска = Новый Массив;

	ИнтерфейсФайловогоПровайдера = Новый ИнтерфейсОбъекта;
	ИнтерфейсФайловогоПровайдера.Ф("РасширенияФайлов");

	РефлекторОбъекта = Новый РефлекторОбъекта(ВходящийКлассПровайдера);

	ПроверкаПровайдера = РефлекторОбъекта.РеализуетИнтерфейс(ИнтерфейсФайловогоПровайдера);

	Если НЕ ПроверкаПровайдера Тогда
		// TODO: Добавить описание того что реализовано, а что нет
		ВызватьИсключение "Не реализован необходимый интерфейс провайдера";
	КонецЕсли;

	КлассПровайдера = ВходящийКлассПровайдера;

	ЧитатьТолькоОдинФайл = Истина;

	НаправлениеСортировки = "ВОЗР";

	РасширенияФайлаПараметров = КлассПровайдера.РасширенияФайлов();

	Если ТипЗнч(РасширенияФайлаПараметров) = Тип("Строка") Тогда
		РасширенияФайлаПараметров = СтрРазделить(РасширенияФайлаПараметров, " ", Ложь);
	КонецЕсли;

КонецПроцедуры

Лог = Логирование.ПолучитьЛог("oscript.lib.configor.file_provider");