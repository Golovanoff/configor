#Использовать logos

Перем Лог;

Перем Настройки; // Структура
Перем НаименованиеНастройки;
Перем ИмяНастройкиВФайле;
Перем ИндексПолей; // Соответствие ключа и типа элемента массива
Перем ИндексСинонимовПолей;
Перем ТекущееПоле; // Временно содержит имя текущего поля для его корректировки
Перем ИндексНастроек;
Перем СтруктураПриемникНастройки;
Перем ИнтерфейсКонструктора;
Перем ИнтерфейсПриемника;

Процедура ПриСозданииОбъекта(ВходящийИндексНастроек, Знач ВходящееНаименованиеНастройки)

	НаименованиеНастройки = ВходящееНаименованиеНастройки;
	Настройки = Новый Структура;
	ИндексПолей = Новый Соответствие;
	ИндексСинонимовПолей = Новый Соответствие;
	ИндексНастроек = ВходящийИндексНастроек;

	Если ИндексНастроек = Неопределено Тогда
		ИндексНастроек = Новый Соответствие;
	КонецЕсли;

	ИндексНастроек.Вставить(НаименованиеНастройки, ЭтотОбъект);

	ИнтерфейсКонструктора = Новый ИнтерфейсКласса;
	ИнтерфейсКонструктора.ПроцедураИнтерфейса("ОписаниеНастройки", 1);

	ИнтерфейсПриемника = Новый ИнтерфейсКласса;
	ИнтерфейсПриемника.ПроцедураИнтерфейса("УстановитьНастройки", 1);

КонецПроцедуры

Функция НоваяНастройка(Знач НаименованиеНастройки) Экспорт
	
	НовыйЭлемент = Новый КонструкторПараметров(ИндексНастроек, НаименованиеНастройки);
	
	Возврат НовыйЭлемент;

КонецФункции

Функция ПриемникНастройки(СтруктураПриемник) Экспорт
	
	СтруктураПриемникНастройки = СтруктураПриемник;
	Возврат ЭтотОбъект;

КонецФункции

Функция ПолучитьИмя() Экспорт

	Возврат НаименованиеНастройки;

КонецФункции

Функция ИмяВФайле(Знач ДополнительноеИмя)

	ИмяНастройкиВФайле = ДополнительноеИмя;
	Возврат ЭтотОбъект;

КонецФункции

Функция ОписаниеПоля(Знач ИмяПоля, Знач ТипПоля, Знач ТипЭлемента = Неопределено, Знач ИмяВложеннойНастройки = Неопределено)

	Описание = НовоеОписаниеПоля();
	Описание.Синонимы = СтрРазделить(ИмяПоля, " ", Ложь);
	Описание.Имя = Описание.Синонимы[0];
	Описание.Тип = ТипПоля;

	Если ТипЭлемента = Неопределено Тогда
		Если ТипПоля = Тип("Массив") Тогда
			ТипЭлемента = Тип("Строка");
		Иначе
			ТипЭлемента = ТипПоля;
		КонецЕсли;
	КонецЕсли;

	Описание.ТипЭлемента = ТипЭлемента;
	Описание.ИмяНастройки = ИмяВложеннойНастройки;
	Описание.ЭтоМассив = Тип("Массив") = ТипПоля;

	ДобавитьСинонимыВИндекс(Описание);

	Возврат Описание;

КонецФункции

Процедура ДобавитьСинонимыВИндекс(Знач СтруктураОписаниеПоля)

	ИмяПоля = СтруктураОписаниеПоля.Имя;

	Для каждого Синоним Из СтруктураОписаниеПоля.Синонимы Цикл
		Лог.Отладка("Добавляю в индекс синоним <%1> для поля <%2>", Синоним, ИмяПоля);
		ИндексСинонимовПолей.Вставить(Синоним, ИмяПоля);
	КонецЦикла;

КонецПроцедуры

Функция НовоеОписаниеПоля()
	Возврат Новый Структура("Имя, Тип, ТипЭлемента, ИмяНастройки, ЭтоМассив, Синонимы");
КонецФункции

Функция ПолучитьОписаниеПоля(Знач ИмяПоля)

	ИмяПоляВИндексе = ИндексСинонимовПолей[ИмяПоля];

	Лог.Отладка("Получение описание поля <%1> (<%2>)", ИмяПоляВИндексе, ИмяПоля);

	Если ИмяПоляВИндексе = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат ИндексПолей[ИмяПоляВИндексе];

КонецФункции

Функция ОписаниеТекущегоПоля()

	Возврат ПолучитьОписаниеПоля(ТекущееПоле);

КонецФункции

Функция СинонимПоля(Знач Синоним) Экспорт

	ОписаниеП = ОписаниеТекущегоПоля();

	ОписаниеП.Синонимы.Добавить(Синоним);

	Возврат ЭтотОбъект;

КонецФункции

Функция ИмяНастройкиПоля(Знач ИмяНастройки) Экспорт

	ОписаниеП = ОписаниеТекущегоПоля();

	ОписаниеП.ИмяНастройки = ИмяНастройки;

	Возврат ЭтотОбъект;

КонецФункции

Функция ТипПоля(Знач ВходящийТипПоля) Экспорт

	ОписаниеП = ОписаниеТекущегоПоля();

	ОписаниеП.Тип = ВходящийТипПоля;

	Возврат ЭтотОбъект;

КонецФункции

Функция Массив(Знач ТипЭлементаМассива) Экспорт

	ОписаниеП = ОписаниеТекущегоПоля();

	ОписаниеП.ЭтоМассив = Истина;
	ОписаниеП.Тип = Тип("Массив");
	ОписаниеП.ТипЭлемента = ТипЭлементаМассива;

	Возврат ЭтотОбъект;

КонецФункции

Функция ПолеМассив(Знач ИмяПоля, Знач ТипЭлемента, Знач ИмяВложеннойНастройки = "") Экспорт

	Лог.Отладка("Добавляю поле <%1> тип <%2> ТипЭлементов <%3>", ИмяПоля, Тип("Массив"), ТипЭлемента);
	
	Если ПустаяСтрока(ИмяВложеннойНастройки) 
		И НЕ ТипЗнч(ТипЭлемента) = Тип("Тип") Тогда
		
		ТипПоля = Тип("КонструкторПараметров");

		Если Тип("КонструкторПараметров") = ТипЗнч(ТипЭлемента) Тогда
			ИмяВложеннойНастройки = ТипЭлемента.ПолучитьИмя();
		Иначе
			КонструкторПараметровКласса = ПолучитьОписаниеНастройки(ТипЭлемента);
			ИмяВложеннойНастройки = КонструкторПараметровКласса.ПолучитьИмя();
		КонецЕсли;
	
	Иначе
		
		ТипПоля = ТипЭлемента;

	КонецЕсли;

	
	Возврат Поле(ИмяПоля, Новый Массив, ТипПоля, ИмяВложеннойНастройки);

КонецФункции

Функция ПолеСтрока(Знач ИмяПоля, ЗначениеПоУмолчанию = "") Экспорт

	Возврат Поле(ИмяПоля, ЗначениеПоУмолчанию);

КонецФункции

Функция ПолеЧисло(Знач ИмяПоля, ЗначениеПоУмолчанию = 0) Экспорт

	Возврат Поле(ИмяПоля, ЗначениеПоУмолчанию);

КонецФункции

Функция ПолеДата(Знач ИмяПоля, ЗначениеПоУмолчанию = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
		ЗначениеПоУмолчанию = Дата("00010101");
	КонецЕсли;

	Возврат Поле(ИмяПоля, ЗначениеПоУмолчанию);

КонецФункции

Функция ПолеБулево(Знач ИмяПоля, ЗначениеПоУмолчанию = Ложь) Экспорт

	Возврат Поле(ИмяПоля, ЗначениеПоУмолчанию);

КонецФункции

Функция Наименование(ВходящееНаименованиеНастройки) Экспорт
	
	НаименованиеНастройки = ВходящееНаименованиеНастройки;
	
	ИндексНастроек.Вставить(НаименованиеНастройки, ЭтотОбъект);

КонецФункции

Функция ИзКласса(КлассОбъект) Экспорт
	
	ИмяНастройки = Строка(ТипЗнч(КлассОбъект));

	РеализовываетИнтерфейсКонструктора(КлассОбъект);

	ПроверкаКласса = Новый ПроверкаКласса(КлассОбъект);
	
	Если ПроверкаКласса.ЕстьФункция("ИмяНастройки") Тогда
		ИмяНастройки = КлассОбъект.ИмяНастройки();
	КонецЕсли;
	
	Наименование(ИмяНастройки);
	
	КлассОбъект.ОписаниеНастройки(ЭтотОбъект);

	Возврат ЭтотОбъект;

КонецФункции

Функция ИзСтруктуры() Экспорт
	
	
КонецФункции

Функция ПолучитьОписаниеНастройки(КлассОбъект)
	
	ИмяНастройки = Строка(ТипЗнч(КлассОбъект));

	РеализовываетИнтерфейсКонструктора(КлассОбъект);

	ПроверкаКласса = Новый ПроверкаКласса(КлассОбъект);
	
	Если ПроверкаКласса.ЕстьФункция("ИмяНастройки") Тогда
		ИмяНастройки = КлассОбъект.ИмяНастройки();
	КонецЕсли;
	
	Если НастройкаЕстьВИндексе(ИмяНастройки) Тогда
		Возврат ИндексНастроек[ИмяНастройки];
	КонецЕсли;

	КонструкторПараметровКласса = НоваяНастройка(ИмяНастройки);
	
	КлассОбъект.ОписаниеНастройки(КонструкторПараметровКласса);

	Возврат КонструкторПараметровКласса;
	
КонецФункции

Функция НастройкаЕстьВИндексе(Знач ИмяНастройки)
	Возврат НЕ ИндексНастроек[ИмяНастройки] = Неопределено;
КонецФункции

Процедура РеализовываетИнтерфейсКонструктора(КлассОбъект)

	ПроверкаКласса = Новый ПроверкаКласса(КлассОбъект);
	ПроверкаКласса.РеализуетИнтерфейс(ИнтерфейсКонструктора, Истина);

КонецПроцедуры

Функция ПолеОбъект(Знач ИмяПоля, Знач Объект) Экспорт

	ТипПоля = Тип("КонструкторПараметров");

	Если Тип("КонструкторПараметров") = ТипЗнч(Объект) Тогда
		ИмяВложеннойНастройки = Объект.ПолучитьИмя();
	ИначеЕсли Тип("Строка") = ТипЗнч(Объект) Тогда
		ИмяВложеннойНастройки = Объект;
	Иначе
		КонструкторПараметровКласса = ПолучитьОписаниеНастройки(Объект);
		ИмяВложеннойНастройки = КонструкторПараметровКласса.ПолучитьИмя();
	КонецЕсли;

	Лог.Отладка("Добавляю поле объект <%1>, <%2>, <%3>", ИмяПоля, ТипПоля, ИмяВложеннойНастройки);

	Возврат Поле(ИмяПоля, Объект, ТипПоля, ИмяВложеннойНастройки);

КонецФункции

Функция Поле(Знач ИмяПоля, Знач ЗначениеПоУмолчанию = Неопределено, Знач ТипЭлемента = Неопределено, Знач ИмяВложеннойНастройки = "") Экспорт

	Если НЕ ЗначениеПоУмолчанию = Неопределено Тогда
		ТипПоля = ТипЗнч(ЗначениеПоУмолчанию);
	Иначе
		ТипПоля = Тип("Строка");
	КонецЕсли;

	ОписаниеНовогоПоля = ОписаниеПоля(ИмяПоля, ТипПоля, ТипЭлемента, ИмяВложеннойНастройки);

	ИндексПолей.Вставить(ОписаниеНовогоПоля.Имя, ОписаниеНовогоПоля);

	Настройки.Вставить(ОписаниеНовогоПоля.Имя, ЗначениеПоУмолчанию);

	ТекущееПоле = ОписаниеНовогоПоля.Имя;

	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает класс приемник для выгрузки результата чтения параметров
//
// Параметры:
//   ИмяНастройки        - Строка - имя параметра
//                                  допустимо указание пути к параметру через точку (например, "config.server.protocol")
//   ЗначениеПоУмолчанию - Произвольный - возвращаемое значение в случае отсутствия параметра после чтения
//
// Возвращаемое значение:
//	Строка, Число, Булево, Массив, Соответствие - значение параметра
//
Функция Настройка(Знач ИмяНастройки, Знач ЗначениеПоУмолчанию = Неопределено) Экспорт

	ЗначениеИзИндекса = ЗначениеПоУмолчанию;

	Лог.Отладка("Получение значения настройки <%1>. Значение по умолчанию <%2>", ИмяНастройки, ЗначениеПоУмолчанию);
	Если Настройки.Свойство(ИмяНастройки, ЗначениеИзИндекса) Тогда
		Лог.Отладка(" --- получено значение <%1>", ЗначениеИзИндекса);
		Возврат ЗначениеИзИндекса;
	КонецЕсли;

	Возврат ЗначениеПоУмолчанию;

КонецФункции

Функция ВСтруктуру() Экспорт

	ИсходящаяСтруктура = Новый Структура;

	Для каждого КлючЗначение Из Настройки Цикл

		Значение = КлючЗначение.Значение;

		ЗначениеКлюча = ЗначениеВСтруктуру(Значение);

		ИсходящаяСтруктура.Вставить(КлючЗначение.Ключ, ЗначениеКлюча);

	КонецЦикла;

	Возврат ИсходящаяСтруктура;

КонецФункции

Функция ЗначениеВСтруктуру(Значение)

	ТипЗначения = ТипЗнч(Значение);

	Если ТипЗначения = Тип("Массив") Тогда

		МассивЗначений = Новый Массив;

		Для Каждого ЭлМассива Из Значение Цикл

			МассивЗначений.Добавить(ЗначениеВСтруктуру(ЭлМассива));

		КонецЦикла;

		Возврат МассивЗначений;

	ИначеЕсли ТипЗначения = Тип("КонструкторПараметров") Тогда

		Возврат Значение.ВСтруктуру();

	Иначе

		Возврат Значение;

	КонецЕсли;

КонецФункции

Процедура ЗначениеПоУмолчанию(НастройкиПоУмолчанию) Экспорт


	
	
КонецПроцедуры

Функция ИзСоответствия(Знач ВходящиеСоответствие) Экспорт

	Лог.Отладка("Читаю настройки <%1>", НаименованиеНастройки);

	ПрочитатьИзСоответствия(ВходящиеСоответствие);

	ПоказатьНастройкиВРежимеОтладки(Настройки);

	Возврат ЭтотОбъект;

КонецФункции

Процедура ПрочитатьИзСоответствия(Знач ВходящиеСоответствие)

	Для каждого КлючЗначение Из ВходящиеСоответствие Цикл

		ИмяКлюча = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;
		Лог.Отладка("Загружаю поле <%1>, <%2>", ИмяКлюча, Значение);
		
		ОписаниеП = ПолучитьОписаниеПоля(ИмяКлюча);
				
		Если ОписаниеП = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ЗначениеНастройки = ПреобразоватьЗначение(Значение, ОписаниеП);

		Настройки.Вставить(ОписаниеП.Имя, ЗначениеНастройки);

	КонецЦикла;

КонецПроцедуры

Функция ПреобразоватьЗначение(Значение, ОписаниеП, ТипЗначения = Неопределено)

	Если ТипЗначения = Неопределено Тогда

		ТипЗначения = ОписаниеП.Тип;

	КонецЕсли;
	
	Лог.Отладка("Тип значение <%1> = <%2>", ТипЗначения, ТипЗнч(Значение));

	Если ТипЗначения = Тип("Строка") Тогда

		Возврат Строка(Значение);

	ИначеЕсли ТипЗначения = Тип("Дата") Тогда

		// TODO: НЕ работает преобразование в дату
		Возврат СтрокаВДату(Значение, "dd/MM/yy hh:mm:ss tt");
	
	ИначеЕсли ТипЗначения = Тип("Число") Тогда

		Возврат Число(Значение);

	ИначеЕсли ТипЗначения = Тип("Булево") Тогда

		Возврат Булево(Значение);

	ИначеЕсли ТипЗначения = Тип("Массив") Тогда

		Возврат ПреобразоватьМассив(Значение, ОписаниеП);

	ИначеЕсли ТипЗначения = Тип("КонструкторПараметров") Тогда

		ОбъектНастройка = ИндексНастроек[ОписаниеП.ИмяНастройки];

		Возврат ОбъектНастройка.ИзСоответствия(Значение);
	Иначе

		ВызватьИсключение СтрШаблон("Не правильный тип настройки поля <%1>", Строка(ТипЗначения));

	КонецЕсли;

КонецФункции

Функция ПреобразоватьМассив(ВходящийМассив, ОписаниеП)

	МассивЗначений = Новый Массив;
	ТипЭлементовМассива = ОписаниеП.ТипЭлемента;
	
	Лог.Отладка("Обрабатываю массив");
		
	Для каждого ЭлементМассива Из ВходящийМассив Цикл
		МассивЗначений.Добавить(ПреобразоватьЗначение(ЭлементМассива, ОписаниеП, ТипЭлементовМассива))

	КонецЦикла;

	Возврат МассивЗначений;

КонецФункции

Процедура ПоказатьНастройкиВРежимеОтладки(ЗначенияПараметров, Знач Родитель = "")
	
	Если Родитель = "" Тогда
		Лог.Отладка("	Тип параметров %1", ТипЗнч(ЗначенияПараметров));
	КонецЕсли;
	
	Если ЗначенияПараметров.Количество() = 0 Тогда
		Лог.Отладка("	Коллекция параметров пуста!");
	КонецЕсли;

	Если ЗначенияПараметров = Тип("Массив") Тогда
		
		Для ИИ=0 По ЗначенияПараметров.ВГраница() Цикл
			ПоказатьНастройкиВРежимеОтладки(ЗначенияПараметров[ИИ], СтрШаблон("%1.%2", Родитель, ИИ));
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(ЗначенияПараметров) = Тип("Структура")
		ИЛИ ТипЗнч(ЗначенияПараметров) = Тип("Соответствие") Тогда
	
		Для каждого Элемент Из ЗначенияПараметров Цикл
	
			Если Не ПустаяСтрока(Родитель) Тогда
				ПредставлениеКлюча  = СтрШаблон("%1.%2", Родитель, Элемент.Ключ);
			Иначе
				ПредставлениеКлюча = Элемент.Ключ;
			КонецЕсли;
		
			Если ТипЗнч(Элемент.Значение) = Тип("КонструкторПараметров") Тогда
		
				ПоказатьНастройкиВРежимеОтладки(Элемент.Значение.ВСтруктуру(), ПредставлениеКлюча);
		
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") 
				ИЛИ ТипЗнч(Элемент.Значение) = Тип("Соответствие")  Тогда
		
				ПоказатьНастройкиВРежимеОтладки(Элемент.Значение, ПредставлениеКлюча);	

			Иначе
				Лог.Отладка("	параметр <%1> = <%2>", ПредставлениеКлюча, Элемент.Значение);
		
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры


// Процедура СтрокаВДату преобразует строку в дату по шаблону форматной строки
//
// Параметры
//  Строка		- строка, содержащая дату,
//  ФорматДаты	- форматная строка вида:
// [dd MM yy]
// [yy-MM-dd HH:mm]
// [dd MM yy HH mm ss]
// [dd MM yyyy]
// [MM dd, yyyy, HH:mm]
// [dd.MM.yy]
// [MM, dd, yyyy]
// [yyyyMMdd]
// [HH-mm-ss, dd-MM-yy]
// [dd]
// [dd MM HH:mm:ss yyyy]
// [HH:mm:ss]
// [HH:mm]
// [yyyy-MM-dd HH:mm:ss]
// [yyyy-MM-dd]
// [yyyy/MM/dd]
// [dd/MM/yy]
// [MM dd yyyy]
// [yyyy-MM]
// [yyyy]
// [MM, dd, yyyy]
// [dd-MM-yyyy]
// [ddMMyyyy]
//
Функция СтрокаВДату(Знач Строка, ФорматДаты) Экспорт
	Ч = Новый Соответствие; 
	Для ё = 1 По СтрДлина(ФорматДаты) + 6 Цикл 
	    Ч[Сред(ФорматДаты + "dMyHms", ё, 1)] = 0
	КонецЦикла; 
	Для ё = 1 По СтрДлина(ФорматДаты) Цикл 
	    Ч[Сред(ФорматДаты, ё, 1)] = 10 * Ч[Сред(ФорматДаты, ё, 1)] + Найти("123456789", Сред(Строка, ё, 1));
	КонецЦикла; 
	Ч["y"] = Ч["y"] + ?(0 < Ч["y"] И Ч["y"] < 50, 2000, ?(0 < Ч["y"] И Ч["y"] < 100, 1900, 0));
	Возврат Дата(Макс(Ч["y"], 1), Макс(Ч["M"],1), Макс(Ч["d"],1), Ч["H"], Ч["m"], Ч["s"]);
КонецФункции 

Лог = Логирование.ПолучитьЛог("oscript.lib.configor.constructor");
Лог.УстановитьУровень(УровниЛога.Отладка)

// Лог = Логирование.ПолучитьЛог("oscript.lib.configor.constructor");
//Лог.УстановитьУровень(УровниЛога.Отладка);
