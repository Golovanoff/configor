// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd
#Использовать asserts
#Использовать tempfiles

#Использовать "../../src"

Перем БДД; //контекст фреймворка 1bdd

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯСохраняюЗначениеВременногоКаталогаВПеременной");
	ВсеШаги.Добавить("ЯУстанавливаюРабочейКаталогВоВременныйКаталог");
	ВсеШаги.Добавить("ЯДобавляюФайлВКаталогПроектаССодержанием");
	ВсеШаги.Добавить("ДатаПараметраРавна");
	ВсеШаги.Добавить("СтрокаПараметраРавна");
	ВсеШаги.Добавить("ЧислоПараметраРавна");
	ВсеШаги.Добавить("БулевоПараметраРавна");
	
	Возврат ВсеШаги;

КонецФункции

Функция ИмяЛога() Экспорт
	Возврат "bdd.configor.feature";
КонецФункции


// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт
	ВременныеФайлы.Удалить();
КонецПроцедуры

//Я устанавливаю рабочей каталог во временный каталог
Процедура ЯУстанавливаюРабочейКаталогВоВременныйКаталог() Экспорт
	УстановитьТекущийКаталог(БДД.ПолучитьИзКонтекста("ВременныйКаталог"));
КонецПроцедуры

//Я сохраняю значение временного каталога в переменной "URLРепозитория"
Процедура ЯСохраняюЗначениеВременногоКаталогаВПеременной(Знач ИмяПеременной) Экспорт
	ВременныйКаталог = БДД.ПолучитьИзКонтекста("ВременныйКаталог");
	БДД.СохранитьВКонтекст(ИмяПеременной, ВременныйКаталог);
КонецПроцедуры

//Я добавляю файл ".orca.yaml" в каталог проекта с содержанием "
//|ИмяПроекта: &app_name test-app
//|
//|build:
//|  binary: *app_name
//|
//|checksum:
//|  name_template: '{{ .ProjectName }}_checksums.txt'
//|changelog:
//|  filters:
//|    exclude:
//|      - '^docs:'
//|      - '^test:'
//|      - Merge pull request
//|      - Merge branch
//|  sort: asc
Процедура ЯДобавляюФайлВКаталогПроектаССодержанием(Знач ИмяФайла, Знач ТекстФайла) Экспорт
	
	КаталогПроекта = БДД.ПолучитьИзКонтекста("КаталогПроекта");
	ФайлНастроек = Новый ЗаписьТекста;
	ФайлНастроек.Открыть(ОбъединитьПути(КаталогПроекта, ИмяФайла), "utf-8");
	ФайлНастроек.ЗаписатьСтроку(ТекстФайла);
	ФайлНастроек.Закрыть();

КонецПроцедуры

//Дата параметра "" равна ""
Процедура ДатаПараметраРавна(Знач ИмяПараметра, Знач ПроверочноеЗначение) Экспорт

	ПроверочнаяДата = Дата(ПроверочноеЗначение);

	МенеджерПараметров = БДД.ПолучитьИзКонтекста("МенеджерПараметров");

	ЗначениеПараметра = МенеджерПараметров.Параметр(ИмяПараметра);

	Утверждения.ПроверитьРавенство(ЗначениеПараметра, ПроверочнаяДата, "Результат должен совпадать с ожиданиями");

КонецПроцедуры

//Строка параметра "" равна ""
Процедура СтрокаПараметраРавна(Знач ИмяПараметра, Знач ПроверочноеЗначение) Экспорт

	МенеджерПараметров = БДД.ПолучитьИзКонтекста("МенеджерПараметров");
	
	ЗначениеПараметра = МенеджерПараметров.Параметр(ИмяПараметра);

	Утверждения.ПроверитьРавенство(ЗначениеПараметра, ПроверочноеЗначение, "Результат должен совпадать с ожиданиями");

КонецПроцедуры

//Число параметра "" равна ""
Процедура ЧислоПараметраРавна(Знач ИмяПараметра, Знач ПроверочноеЗначение) Экспорт

	ПроверочноеЧисло = Число(ПроверочноеЗначение);

	МенеджерПараметров = БДД.ПолучитьИзКонтекста("МенеджерПараметров");
	
	ЗначениеПараметра = МенеджерПараметров.Параметр(ИмяПараметра);

	Утверждения.ПроверитьРавенство(ЗначениеПараметра, ПроверочноеЧисло, "Результат должен совпадать с ожиданиями");

КонецПроцедуры

//Булево параметров "" равна ""
Процедура БулевоПараметраРавна(Знач ИмяПараметра, Знач ПроверочноеЗначение) Экспорт

	ПроверочноеБулево = Булево(ПроверочноеЗначение);

	МенеджерПараметров = БДД.ПолучитьИзКонтекста("МенеджерПараметров");

	ЗначениеПараметра = МенеджерПараметров.Параметр(ИмяПараметра);

	Утверждения.ПроверитьРавенство(ЗначениеПараметра, ПроверочноеБулево, "Результат должен совпадать с ожиданиями");

КонецПроцедуры

Функция КаталогFixtures()
	Возврат ОбъединитьПути(КаталогПриложения(), "tests", "fixtures");
КонецФункции

Функция КаталогПриложения()
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..", "..");
КонецФункции

Функция ОбернутьВКавычки(Знач Строка);
	Возврат """" + Строка + """";
КонецФункции

Лог = Логирование.ПолучитьЛог(ИмяЛога());
//Лог.УстановитьУровень(Логирование.ПолучитьЛог("bdd").Уровень());
// Лог.УстановитьУровень(УровниЛога.Отладка);
