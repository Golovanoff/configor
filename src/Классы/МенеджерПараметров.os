#Использовать asserts
#Использовать logos
#Использовать tempfiles

Перем ЧтениеПараметровВыполнено; // булево - флаг, что чтение выполнено

Перем ИндексПараметров; // Соответствие - плоский индекс всех параметров
Перем ПрочитанныеПараметры; // Соответствие - результат чтения из файла

Перем КлассПриемникПараметров; // Произвольный класс обеспечивающий: Функция Параметры() Экспорт, Процедура УстановитьПараметры(НовыеПараметры) Экспорт

Перем ТаблицаПровайдеровПараметров; // ТаблицаЗначений Колонки: Имя, Класс, Приоритет, Настройки

Перем ИндексРазделовПараметров;
Перем ОбщаяНастройка;

Перем ТекущийИдентификаторПровайдер; // Идентификатор

Перем Лог;

Процедура ПриСозданииОбъекта()

	ИндексПараметров = Новый Соответствие;
	ПрочитанныеПараметры = Новый Соответствие;


	ТаблицаПровайдеровПараметров = Новый ТаблицаЗначений;
	ТаблицаПровайдеровПараметров.Колонки.Добавить("Идентификатор"); // Представление
	ТаблицаПровайдеровПараметров.Колонки.Добавить("Класс"); // ИмяКласса или Инстанс Класс
	ТаблицаПровайдеровПараметров.Колонки.Добавить("Приоритет"); // Число от 0 до 10
	ТаблицаПровайдеровПараметров.Колонки.Добавить("Настройки"); // Структура

	ДобавитьПровайдерПараметров("json", "ПровайдерПараметровJSON", Новый Структура, 0);

	ТекущийИдентификаторПровайдер = "json";

	ОбщаяНастройка = Новый Структура();
	ОбщаяНастройка.Вставить("ФайлПараметров", Неопределено);
	ОбщаяНастройка.Вставить("КаталогиПоиска", Новый Массив);
	ОбщаяНастройка.Вставить("ИмяФайлаПараметров", "config");
	ОбщаяНастройка.Вставить("РасширениеФайла", ""); // Дополнительные ограничение для провайдеров
	ОбщаяНастройка.Вставить("КлючЗначениеПараметров", Новый Массив); // Пути к файлам параметров или другая информация от провайдеров

	ДобавитьСтандартныеПутиПоиска();

КонецПроцедуры

Процедура УстановитьПроизвольныйПровайдерПараметров(Знач ИдентификаторПровайдера, Знач Класс, Знач Настройки = Неопределено, Знач Приоритет = Неопределено) Экспорт

	ТаблицаПровайдеровПараметров.Очистить();

	ДобавитьПровайдерПараметров(ИдентификаторПровайдера, Класс, Настройки, Приоритет);

КонецПроцедуры

Процедура ДобавитьПровайдерПараметров(Знач ИдентификаторПровайдера, Знач Класс, Знач Настройки = Неопределено, Знач Приоритет = 0) Экспорт

	НовыйПровайдер = ТаблицаПровайдеровПараметров.Добавить();
	НовыйПровайдер.Идентификатор = ИдентификаторПровайдера;
	НовыйПровайдер.Класс = Класс;
	НовыйПровайдер.Настройки = Настройки;
	НовыйПровайдер.Приоритет = Приоритет;

КонецПроцедуры

Процедура УстановитьФайлПараметров(Знач ПутьКФайлу) Экспорт

	ОбщаяНастройка.Вставить("ФайлПараметров", ПутьКФайлу);

КонецПроцедуры

Процедура ДобавитьКаталогПоиска(Знач ПутьПоискаФайлов) Экспорт

	КаталогиПоиска = ОбщаяНастройка.КаталогиПоиска;
	КаталогиПоиска.Добавить(ПутьПоискаФайлов);

КонецПроцедуры

Процедура УстановитьИмяФайла(Знач ИмяФайла) Экспорт

	ОбщаяНастройка.Вставить("ИмяФайлаПараметров", ИмяФайла);

КонецПроцедуры

Процедура УстановитьПровайдерПараметров(Знач ИдентификаторПровайдера)

	Если НайтиПровайдераПоИдентификатору(ИдентификаторПровайдера) = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Провайдер с идентификатором <%1> не найден", ИдентификаторПровайдера);
	КонецЕсли;

	ТекущийИдентификаторПровайдер = ИдентификаторПровайдера;

КонецПроцедуры

Функция НайтиПровайдераПоИдентификатору(Знач ИдентификаторПровайдера)

	Отбор = Новый Структура("Идентификатор", ИдентификаторПровайдера);

	СтрокаПровайдера = ТаблицаПровайдеровПараметров.НайтиСтроки(Отбор);

	Возврат СтрокаПровайдера;

КонецФункции

Процедура УстановитьРасширениеФайла(Знач РасширениеФайла) Экспорт

	Если Не СтрНачинаетсяС(РасширениеФайла, ".") Тогда
		РасширениеФайла = "."+РасширениеФайла;
	КонецЕсли;

	ОбщаяНастройка.Вставить("РасширениеФайла", РасширениеФайла);

КонецПроцедуры

Процедура УстановитьКлассПриемник(КлассПараметров) Экспорт

	КлассПриемникПараметров = КлассПараметров;

КонецПроцедуры

Функция Параметр(Знач ИмяПараметра, Знач ЗначениеПоУмолчанию = Неопределено) Экспорт

	ЗначениеИзИндекса = ИндексПараметров[ИмяПараметра];

	Если НЕ ЗначениеИзИндекса = Неопределено Тогда
		Возврат ЗначениеИзИндекса;
	КонецЕсли;

	Возврат ЗначениеПоУмолчанию;

КонецФункции

Функция ЧтениеВыполнено() Экспорт
	Возврат ЧтениеПараметровВыполнено;
КонецФункции

Процедура Прочитать() Экспорт

	ИндексПараметров.Очистить();
	ПрочитанныеПараметры.Очистить();
	ВыполнитьЧтениеПоТаблицеПровайдеров();

	Лог.Отладка("ПрочитанныеПараметры количество <%1>", ПрочитанныеПараметры.Количество());

	ОбновитьИндексПараметров();

	ПоказатьПараметрыВРежимеОтладки(ПрочитанныеПараметры);

	ЧтениеПараметровВыполнено = ИндексПараметров.Количество() > 0;

	Если Не КлассПриемникПараметров = Неопределено Тогда
		ВыгрузитьПараметрыВКлассПриемник();
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьЧтениеПоТаблицеПровайдеров()

	ТаблицаПровайдеровПараметров.Сортировать("Приоритет ВОЗР");

	Для каждого ПровайдерЧтения Из ТаблицаПровайдеровПараметров Цикл

		Если ТипЗнч(ПровайдерЧтения.Класс) = Тип("Строка") Тогда

			Попытка
				КлассПровайдера = Новый(ПровайдерЧтения.Класс);
			Исключение
				Лог.КритичнаяОшибка("Не удалось прочитать параметры используя провайдер <%1>. По причине: %2", ПровайдерЧтения.Идентификатор, ОписаниеОшибки());
				Продолжить;
			КонецПопытки;

		Иначе
			КлассПровайдера = ПровайдерЧтения.Класс;
		КонецЕсли;

		Лог.Отладка("Класс провайдера <%1>", КлассПровайдера);
		Если Не ПроверитьКлассПровайдера(КлассПровайдера) Тогда
			Продолжить;
		КонецЕсли;

		ВыполнитьЧтениеДляПровайдера(ПровайдерЧтения.Идентификатор, КлассПровайдера, ПровайдерЧтения.Настройки);

	КонецЦикла;

КонецПроцедуры

Функция ПроверитьКлассПровайдера(КлассЧтенияПараметров)
	НеобходимыйИнтерфейсЕсть = ПроверитьМетодКласса(КлассЧтенияПараметров, "ПрочитатьПараметры", 1, Истина);

	Если НЕ НеобходимыйИнтерфейсЕсть Тогда
		Лог.КритичнаяОшибка("Класс <%1> не реализует необходимой функции <%2>", КлассЧтенияПараметров , "ПрочитатьПараметры(ПараметрыПровайдеры)" );
	КонецЕсли;
	
	Возврат НеобходимыйИнтерфейсЕсть;
КонецФункции

Процедура ВыполнитьЧтениеДляПровайдера(ИдентификаторПровайдера, КлассПровайдера, ПараметрыПровайдера)

	Попытка
		ДополнитьПараметрыПровайдера(ПараметрыПровайдера, ОбщаяНастройка);
		ПрочитанныеПараметрыПровайдера = КлассПровайдера.ПрочитатьПараметры(ПараметрыПровайдера);
	Исключение
		Лог.КритичнаяОшибка("Не удалось прочитать параметры используя провайдер <%1>. По причине: %2", ИдентификаторПровайдера, ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	Лог.Отладка("Провайдер <%1> вернул <%2> параметров",ИдентификаторПровайдера, ПрочитанныеПараметрыПровайдера.Количество());
	ОбъединитьПрочитанныеПараметры(ПрочитанныеПараметрыПровайдера, ПрочитанныеПараметры);

КонецПроцедуры

Процедура ДополнитьПараметрыПровайдера(ПараметрыПровайдера, ДополнительныеПараметры)

	Лог.Отладка("Дополняю параметры провайдера общими параметрами");
	Для каждого КлючЗначение Из ДополнительныеПараметры Цикл

		КлючИсточника = КлючЗначение.Ключ;
		ЗначениеИсточника = КлючЗначение.Значение;

		// Если НЕ ПараметрыПровайдера.Свойство(КлючИсточника) Тогда
			ПараметрыПровайдера.Вставить(КлючИсточника, ЗначениеИсточника);
		// КонецЕсли;

	КонецЦикла;

	Лог.Отладка("Всего параметров провайдера <%1>", ПараметрыПровайдера.Количество());

КонецПроцедуры

Процедура ОбъединитьПрочитанныеПараметры(Источник, Приемник)

	Для каждого КлючЗначение Из Источник Цикл

		КлючИсточника = КлючЗначение.Ключ;
		ЗначениеИсточника = КлючЗначение.Значение;

		ЗначениеПриемника = Приемник[КлючИсточника];
		//Лог.Отладка("Ключ источника <%1>?<%2> значение приемника <%3>", КлючИсточника, ЗначениеИсточника, ЗначениеПриемника);
		Если ЗначениеПриемника = Неопределено Тогда
			Приемник.Вставить(КлючИсточника, ЗначениеИсточника);
			Продолжить;
		КонецЕсли;

		Если Не ТипЗнч(ЗначениеИсточника) = ТипЗнч(ЗначениеПриемника) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(ЗначениеИсточника) = Тип("Соответствие") тогда

			ОбъединитьПрочитанныеПараметры(ЗначениеИсточника, ЗначениеПриемника);

		ИначеЕсли ТипЗнч(ЗначениеИсточника) = Тип("Массив") тогда

			Для каждого ЭлементМассива Из ЗначениеИсточника Цикл

				Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда

					НайденныйЭлемент = ЗначениеПриемника.Найти(ЭлементМассива);

					Если НайденныйЭлемент = Неопределено Тогда
						ЗначениеПриемника.Добавить(ЭлементМассива);
						Продолжить;
					КонецЕсли;

				КонецЕсли;

				ЗначениеПриемника.Добавить(ЭлементМассива);


			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры



Процедура Записать() Экспорт

	// ЗаписатьВФайл(ПутьКФайлуПараметров, РасширениеФайлаПараметров)

КонецПроцедуры

Процедура ЗаписатьВФайл(Знач ПутьКФайлуПараметров, Знач ФорматЗаписи = "json") Экспорт
	// Запись параметров
КонецПроцедуры

Процедура ОбновитьИндексПараметров()

	// Рекурсивный вызов для входящих параметров
	ДобавитьЗначениеПараметра("", ПрочитанныеПараметры);

КонецПроцедуры

Функция ЭтоМассив(Знач Значение)
	Возврат ТипЗнч(Значение) = Тип("Массив");
КонецФункции

Функция ЭтоСоответствие(Знач Значение)
	Возврат ТипЗнч(Значение) = Тип("Соответствие");
КонецФункции

Функция ЭтоСтруктура(Знач Значение)
	Возврат ТипЗнч(Значение) = Тип("Структура");
КонецФункции

Процедура ДобавитьПараметрВИндекс(Знач ИмяПараметра, Знач ЗначениеПараметра)

	// Вставляем все значение целиком
	// Для  массивов и соответствий сразу
	Если Не ПустаяСтрока(ИмяПараметра) Тогда
		Лог.Отладка("Добавляю параметр <%1> со значением <%2> в индекс", ИмяПараметра, ЗначениеПараметра);
		ИндексПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЕсли;

	// Рекурсивное заполнение значения параметра
	ДобавитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);

КонецПроцедуры

Процедура ДобавитьЗначениеПараметра(Знач ИмяПараметра, Знач ЗначениеПараметра)

	Если ЭтоМассив(ЗначениеПараметра) Тогда
		ДобавитьПараметрМассивВИндекс(ЗначениеПараметра, ИмяПараметра);
	ИначеЕсли ЭтоСоответствие(ЗначениеПараметра) Тогда
		ДобавитьСоответствиеВИндекс(ЗначениеПараметра, ИмяПараметра);
	ИначеЕсли ЭтоСтруктура(ЗначениеПараметра) Тогда
		ДобавитьСоответствиеВИндекс(ЗначениеПараметра, ИмяПараметра);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПараметрМассивВИндекс(Знач МассивЗначений, Знач ИмяРодителя = "")

	Лог.Отладка("Обрабатываю массив значений <%1> ", ИмяРодителя);

	ШаблонИмениПараметра = "%1";

	Если Не ПустаяСтрока(ИмяРодителя) Тогда
		ШаблонИмениПараметра = ИмяРодителя + ".%1";
	КонецЕсли;

	Для ИндексЗначения = 0 По МассивЗначений.ВГраница() Цикл

		ИмяПараметра = СтрШаблон(ШаблонИмениПараметра, ИндексЗначения);
		ДобавитьПараметрВИндекс(ИмяПараметра, МассивЗначений[ИндексЗначения]);

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьСоответствиеВИндекс(Знач ВходящиеПараметры, Знач ИмяРодителя = "")

	Лог.Отладка("Обрабатываю соответствие значений <%1> ", ИмяРодителя);

	ШаблонИмениПараметра = "%1";

	Если Не ПустаяСтрока(ИмяРодителя) Тогда
		ШаблонИмениПараметра = ИмяРодителя + ".%1";
	КонецЕсли;

	Для каждого КлючЗначение Из ВходящиеПараметры Цикл

		Лог.Отладка("Обрабатываю соответствие ключ <%1> ", КлючЗначение.Ключ);

		ИмяПараметра = СтрШаблон(ШаблонИмениПараметра, КлючЗначение.Ключ);
		ЗначениеПараметра = КлючЗначение.Значение;

		ДобавитьПараметрВИндекс(ИмяПараметра, ЗначениеПараметра);

	КонецЦикла;

КонецПроцедуры


Процедура ВыгрузитьПараметрыВКлассПриемник()

	СтруктураПараметров = КлассПриемникПараметров.ПолучитьПараметры();

	ЗаполнитьСтруктуруПараметров(СтруктураПараметров);

	КлассПриемникПараметров.УстановитьПараметры(СтруктураПараметров);

КонецПроцедуры

Процедура ДобавитьСоответствиеВСтруктуру(Знач ВходящиеПараметры, Знач ИмяРодителя = "")

	ШаблонИмениПараметра = "%1";

	Если Не ПустаяСтрока(ИмяРодителя) Тогда
		ШаблонИмениПараметра = ИмяРодителя + ".%1";
	КонецЕсли;

	Для каждого КлючЗначение Из ВходящиеПараметры Цикл

		ИмяПараметра = СтрШаблон(ШаблонИмениПараметра, КлючЗначение.Ключ);
		ЗначениеПараметра = КлючЗначение.Значение;

		ДобавитьПараметрВИндекс(ИмяПараметра, ЗначениеПараметра);

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтруктуруПараметров(СтруктураПараметров)

	ЕстьОбработчикЗначения = Ложь; //  Проверить на доступный метод ПриПолученииЗначения(ИмяСвойства, ЗначениеСвойства, СтандартнаяОбработка)

	Для каждого КлючЗначение Из СтруктураПараметров Цикл

		ИмяКлюча = КлючЗначение.Ключ;
		ТекущееЗначение = КлючЗначение.Значение;

		ИмяПараметра = ИмяКлюча;

		НовоеЗначение = Параметр(ИмяПараметра);

		Если НовоеЗначение = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтандартнаяОбработка = Истина;

		ПриУстановкиЗначенияПараметра(ИмяПараметра, ИмяКлюча, НовоеЗначение, СтандартнаяОбработка);

		Если СтандартнаяОбработка Тогда

			СтруктураПараметров[ИмяКлюча] = ОбработатьЗначениеРекурсивно(ТекущееЗначение, НовоеЗначение, ИмяКлюча);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ПриУстановкиЗначенияПараметра(Знач ПолныйПутьКлюча, Знач ИмяКлюча, Значение, СтандартнаяОбработка)

	ЕстьНужныйМетод = Истина; // Добавить поверку 1 раз в кеш
	Если ЕстьНужныйМетод Тогда
		КлассПриемникПараметров.ПриУстановкиЗначенияПараметра(ПолныйПутьКлюча, ИмяКлюча, Значение, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

Функция ОбработатьЗначениеРекурсивно(Знач ЗначениеСтруктуры, Знач ЗначениеПараметра, Знач ИмяПараметра = "")

	Если ЗначениеПараметра = Неопределено Тогда
		Возврат ЗначениеСтруктуры;
	КонецЕсли;

	Если ЭтоМассив(ЗначениеСтруктуры) Тогда
		Возврат ОбработатьЗначениеМассив(ЗначениеСтруктуры, ЗначениеПараметра, ИмяПараметра);
	ИначеЕсли ЭтоСоответствие(ЗначениеСтруктуры) Тогда
		Возврат ОбработатьЗначениеСоответствие(ЗначениеСтруктуры, ЗначениеПараметра, ИмяПараметра);
	ИначеЕсли ЭтоСтруктура(ЗначениеСтруктуры) Тогда
		Возврат ОбработатьЗначениеСтруктуру(ЗначениеСтруктуры, ЗначениеПараметра, ИмяПараметра);
	Иначе
		Возврат ЗначениеПараметра;
	КонецЕсли;

КонецФункции

Функция ОбработатьЗначениеМассив(Знач МассивСтруктуры, Знач МассивЗначений, Знач ИмяРодителя = "")

	Лог.Отладка("Обработка массива");
	Лог.Отладка("Структура приемник: ");
	Лог.Отладка("-- Имя родителя <%1>", ИмяРодителя);
	Лог.Отладка("-- Количество элементов <%1>", МассивЗначений.Количество());

	ШаблонИмениПараметра = "%1";

	Если Не ПустаяСтрока(ИмяРодителя) Тогда
		ШаблонИмениПараметра = ИмяРодителя + ".%1";
	КонецЕсли;

	Если МассивЗначений.Количество() = 0 Тогда
		Возврат МассивСтруктуры;
	КонецЕсли;

	Если МассивСтруктуры.Количество() > 0 Тогда
		ЗначениеСтруктуры = МассивЗначений[0];
	КонецЕсли;

	МассивСтруктуры.Очистить();

	Для ИндексЗначения = 0 По МассивЗначений.ВГраница() Цикл

		ИмяПараметра = СтрШаблон(ШаблонИмениПараметра, ИндексЗначения);

		СтандартнаяОбработка = Истина;

		ЗначениеПараметра = Параметр(ИмяПараметра);

		НовоеЗначение = ОбработатьЗначениеРекурсивно(ЗначениеСтруктуры, ЗначениеПараметра, ИмяПараметра);

		Лог.Отладка("Параметр <%1>  значение <%2>", ИмяПараметра, НовоеЗначение);
		ПриУстановкиЗначенияПараметра(ИмяПараметра, ИндексЗначения, НовоеЗначение, СтандартнаяОбработка);

		Если СтандартнаяОбработка Тогда

			МассивСтруктуры.Добавить(НовоеЗначение);

		КонецЕсли;

	КонецЦикла;

	Возврат МассивСтруктуры;

КонецФункции

Функция ОбработатьЗначениеСоответствие(Знач СтруктураПриемник, Знач ВходящееСоответсвие, Знач ИмяРодителя = "")

	Лог.Отладка("Обработка соответствие ");
	Лог.Отладка("Структура приемник: ");
	Лог.Отладка("-- Имя родителя <%1>", ИмяРодителя);
	ПоказатьПараметрыВРежимеОтладки(СтруктураПриемник, ИмяРодителя);

	ШаблонИмениПараметра = "%1";

	Если Не ПустаяСтрока(ИмяРодителя) Тогда
		ШаблонИмениПараметра = ИмяРодителя + ".%1";
	КонецЕсли;

	НоваяКоллекция = Новый Соответствие;

	Для каждого КлючЗначение Из СтруктураПриемник Цикл

		ИмяКлюча = КлючЗначение.Ключ;
		ТекущееЗначение = КлючЗначение.Значение;

		ИмяПараметра = СтрШаблон(ШаблонИмениПараметра, ИмяКлюча);

		НовоеЗначение = Параметр(ИмяПараметра);

		Если НовоеЗначение = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтандартнаяОбработка = Истина;

		ПриУстановкиЗначенияПараметра(ИмяПараметра, ИмяКлюча, НовоеЗначение, СтандартнаяОбработка);

		Если СтандартнаяОбработка Тогда

			НоваяКоллекция[ИмяКлюча] = ОбработатьЗначениеРекурсивно(ТекущееЗначение, НовоеЗначение, ИмяПараметра);

		КонецЕсли;

	КонецЦикла;

	Для каждого КлючЗначение Из НоваяКоллекция Цикл

		ИмяКлюча = КлючЗначение.Ключ;
		ТекущееЗначение = КлючЗначение.Значение;

		СтруктураПриемник.Вставить(ИмяКлюча, ТекущееЗначение);

	КонецЦикла;

	Возврат СтруктураПриемник;

КонецФункции

Функция ОбработатьЗначениеСтруктуру(Знач СтруктураПриемник, Знач ВходящаяСтруктура, Знач ИмяРодителя = "")

	Лог.Отладка("Обработка структуры ");
	Лог.Отладка("Структура приемник: ");
	Лог.Отладка("-- Имя родителя <%1>", ИмяРодителя);
	ПоказатьПараметрыВРежимеОтладки(СтруктураПриемник, ИмяРодителя);

	ШаблонИмениПараметра = "%1";

	Если Не ПустаяСтрока(ИмяРодителя) Тогда
		ШаблонИмениПараметра = ИмяРодителя + ".%1";
	КонецЕсли;

	Для каждого КлючЗначение Из СтруктураПриемник Цикл

		ИмяКлюча = КлючЗначение.Ключ;
		ТекущееЗначение = КлючЗначение.Значение;

		ИмяПараметра = СтрШаблон(ШаблонИмениПараметра, ИмяКлюча);

		НовоеЗначение = Параметр(ИмяПараметра);

		Если НовоеЗначение = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтандартнаяОбработка = Истина;

		ПриУстановкиЗначенияПараметра(ИмяПараметра, ИмяКлюча, НовоеЗначение, СтандартнаяОбработка);

		Если СтандартнаяОбработка Тогда

			СтруктураПриемник[ИмяКлюча] = ОбработатьЗначениеРекурсивно(ТекущееЗначение, НовоеЗначение, ИмяПараметра);

		КонецЕсли;

	КонецЦикла;

	Возврат СтруктураПриемник;

КонецФункции

Функция ПроверитьМетодКласса(Знач ПроверяемыйКласс,
	Знач ИмяМетода,
	Знач ТребуемоеКоличествоПараметров = 0,
	Знач ЭтоФункция = Ложь)

	РефлекторПроверкиКоманд = Новый Рефлектор;

	ЕстьМетод = РефлекторПроверкиКоманд.МетодСуществует(ПроверяемыйКласс, ИмяМетода);
	Лог.Отладка("Проверяемый метод <%1> найден: %2", ИмяМетода, ЕстьМетод);
	Если Не ЕстьМетод Тогда
		Возврат Ложь;
	КонецЕсли;

	ТаблицаМетодов = РефлекторПроверкиКоманд.ПолучитьТаблицуМетодов(ПроверяемыйКласс);

	СтрокаМетода = ТаблицаМетодов.Найти(ИмяМетода, "Имя");
	Лог.Отладка("Поиск строки в таблице методов класса <%1> найдена: %2, общее количество методов класса: %3", ПроверяемыйКласс, НЕ СтрокаМетода = Неопределено, ТаблицаМетодов.Количество());
	Если СтрокаМетода = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ПроверкаНаФункцию = ЭтоФункция = СтрокаМетода.ЭтоФункция;
	ПроверкаНаКоличествоПараметров = ТребуемоеКоличествоПараметров = СтрокаМетода.КоличествоПараметров;

	Лог.Отладка("Проверяемый метод <%1> корректен: %2", ИмяМетода, ПроверкаНаФункцию И ПроверкаНаКоличествоПараметров);
	Возврат ПроверкаНаФункцию
		И ПроверкаНаКоличествоПараметров;

КонецФункции // ПроверитьМетодУКласса()

Процедура ДобавитьСтандартныеПутиПоиска()

	СистемнаяИнформация = Новый СистемнаяИнформация;

	ДобавитьКаталогПоиска(ТекущийКаталог());
	ДобавитьКаталогПоиска(СистемнаяИнформация.ПолучитьПутьПапки(СпециальнаяПапка.ЛокальныйКаталогДанныхПриложений));
	ДобавитьКаталогПоиска(СистемнаяИнформация.ПолучитьПутьПапки(СпециальнаяПапка.ПрофильПользователя));

КонецПроцедуры

Процедура ОчиститьСтандартныеПутиПоиска()

	ОбщаяНастройка.КаталогиПоиска.Очистить();

КонецПроцедуры

Процедура ПоказатьПараметрыВРежимеОтладки(ЗначенияПараметров, Знач Родитель = "")
	Если Родитель = "" Тогда
		Лог.Отладка("	Тип параметров %1", ТипЗнч(ЗначенияПараметров));
	КонецЕсли;
	Если ЗначенияПараметров.Количество() = 0 Тогда
		Лог.Отладка("	Коллекция параметров пуста!");
	КонецЕсли;
	Для каждого Элемент из ЗначенияПараметров Цикл
		ПредставлениеКлюча = Элемент.Ключ;
		Если Не ПустаяСтрока(Родитель) Тогда
			ПредставлениеКлюча  = СтрШаблон("%1.%2", Родитель, ПредставлениеКлюча);
		КонецЕсли;
		Лог.Отладка("	Получен параметр <%1> = <%2>", ПредставлениеКлюча, Элемент.Значение);
		Если ТипЗнч(Элемент.Значение) = Тип("Соответствие")
			ИЛИ ТипЗнч(Элемент.Значение) = Тип("Структура")  Тогда
			ПоказатьПараметрыВРежимеОтладки(Элемент.Значение, ПредставлениеКлюча);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Лог = Логирование.ПолучитьЛог("oscript.lib.configor");