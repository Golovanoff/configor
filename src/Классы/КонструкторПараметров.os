#Использовать logos
#Использовать reflector

Перем Лог;

Перем Настройки; // Структура
Перем НаименованиеПараметров; // Строка
Перем НаименованиеУзлаПараметров;
Перем ИндексПолей; // Соответствие ключа и типа элемента массива
Перем ИндексСинонимовПолей;
Перем ТекущееПоле; // Временно содержит имя текущего поля для его корректировки
Перем ИндексНастроек;

Перем ИнтерфейсКонструктора;
Перем ИнтерфейсПриемника;

#Область Работа_с_конструктором_параметров

// Создает и возвращает новый экземпляр конструктора параметров
//
// Параметры:
//   НовоеНаименованиеПараметров - Строка - наименование конструктора параметров
//
//  Возвращаемое значение:
//   Объект.КонструкторПараметров - ссылка на новый элемент класса <КонструкторПараметров>
//
Функция НовыеПараметры(Знач НовоеНаименованиеПараметров) Экспорт
	
	НовыйЭлемент = Новый КонструкторПараметров(ИндексНастроек, НовоеНаименованиеПараметров);
	
	Возврат НовыйЭлемент;

КонецФункции

// Возвращает текущее наименование параметров
//
//  Возвращаемое значение:
//   Строка - текущее наименование параметров
//
Функция ПолучитьНаименованиеПараметров() Экспорт

	Возврат НаименованиеПараметров;

КонецФункции

// Устанавливает дополнительное наименование узла параметров 
//
// Параметры:
//   НовоеНаименованиеУзлаПараметров - Строка - дополнительное наименование параметров в файле
//
//  Возвращаемое значение:
//   Объект.КонструкторПараметров - ссылка на текущий элемент класса <КонструкторПараметров>
//
Функция НаименованиеУзла(Знач НовоеНаименованиеУзлаПараметров) Экспорт

	НаименованиеУзлаПараметров = НовоеНаименованиеУзлаПараметров;
	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает новое наименование параметров
//
// Параметры:
//   НовоеНаименованиеПараметров - Строка - новое наименование текущего класса параметров
//
//  Возвращаемое значение:
//   Объект.КонструкторПараметров - ссылка на текущий элемент класса <КонструкторПараметров>
//
Функция Наименование(НовоеНаименованиеПараметров) Экспорт
	
	НаименованиеПараметров = НовоеНаименованиеПараметров;
	
	ИндексНастроек.Вставить(НаименованиеПараметров, ЭтотОбъект);

	Возврат ЭтотОбъект;

КонецФункции

// Выполняет заполнение описания параметров из произвольного объекта
//
// Параметры:
//   КлассОбъект - Объект - произвольный класс, реализуемый интерфейс Конструктора
//
//  Возвращаемое значение:
//   Объект.КонструкторПараметров - ссылка на текущий элемент класса <КонструкторПараметров>
//
Функция ИзКласса(КлассОбъект) Экспорт
	
	НовоеНаименованиеПараметров = Строка(ТипЗнч(КлассОбъект));

	РеализовываетИнтерфейсКонструктора(КлассОбъект);

	РефлекторОбъекта = Новый РефлекторОбъекта(КлассОбъект);
	
	Если РефлекторОбъекта.ЕстьФункция("ПолучитьНаименованиеПараметров") Тогда
		НовоеНаименованиеПараметров = КлассОбъект.ПолучитьНаименованиеПараметров();
	КонецЕсли;
	
	Наименование(НовоеНаименованиеПараметров);
	
	КлассОбъект.ПолеПараметровараметров(ЭтотОбъект);

	Возврат ЭтотОбъект;

КонецФункции

#КонецОбласти

#Область Работа_с_текущем_полем_настройки

// Создает и возвращает новое поле-строка конструктора параметров
//
// Параметры:
//   ИмяПоля     - Строка - имя поля, возможно передача нескольких через пробел.
//   ТипЭлемента - строка - значение поля по умолчанию
//
//  Возвращаемое значение:
//   Объект.ПолеКонструктораПараметров - ссылка на текущий элемент класса <ПолеКонструктораПараметров>
//
Функция ПолеМассив(Знач ИмяПоля, Знач ТипЭлемента) Экспорт

	Лог.Отладка("Добавляю поле <%1> тип <%2> ТипЭлементов <%3>", ИмяПоля, Тип("Массив"), ТипЭлемента);
	
	Возврат Поле(ИмяПоля, Тип("Массив"), Новый Массив, ТипЭлемента);

КонецФункции

// Создает и возвращает новое поле-строка конструктора параметров
//
// Параметры:
//   ИмяПоля             - Строка - имя поля, возможно передача нескольких через пробел.
//   ЗначениеПоУмолчанию - строка - значение поля по умолчанию
//
//  Возвращаемое значение:
//   Объект.ПолеКонструктораПараметров - ссылка на текущий элемент класса <ПолеКонструктораПараметров>
//
Функция ПолеСтрока(Знач ИмяПоля, ЗначениеПоУмолчанию = "") Экспорт

	Возврат Поле(ИмяПоля, Тип("Строка"), ЗначениеПоУмолчанию);

КонецФункции

// Создает и возвращает новое поле-число конструктора параметров
//
// Параметры:
//   ИмяПоля             - Строка - имя поля, возможно передача нескольких через пробел.
//   ЗначениеПоУмолчанию - Число - значение поля по умолчанию
//
//  Возвращаемое значение:
//   Объект.ПолеКонструктораПараметров - ссылка на текущий элемент класса <ПолеКонструктораПараметров>
//
Функция ПолеЧисло(Знач ИмяПоля, ЗначениеПоУмолчанию = 0) Экспорт

	Возврат Поле(ИмяПоля, Тип("Число"), ЗначениеПоУмолчанию);

КонецФункции

// Создает и возвращает новое поле-дата конструктора параметров
//
// Параметры:
//   ИмяПоля             - Строка - имя поля, возможно передача нескольких через пробел.
//   ЗначениеПоУмолчанию - Дата - значение поля по умолчанию
//
//  Возвращаемое значение:
//   Объект.ПолеКонструктораПараметров - ссылка на текущий элемент класса <ПолеКонструктораПараметров>
//
Функция ПолеДата(Знач ИмяПоля, ЗначениеПоУмолчанию = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
		ЗначениеПоУмолчанию = Дата("00010101");
	КонецЕсли;

	Возврат Поле(ИмяПоля, Тип("Дата"), ЗначениеПоУмолчанию);

КонецФункции

// Создает и возвращает новое поле-булево конструктора параметров
//
// Параметры:
//   ИмяПоля             - Строка - имя поля, возможно передача нескольких через пробел.
//   ЗначениеПоУмолчанию - Булево - значение поля по умолчанию
//
//  Возвращаемое значение:
//   Объект.ПолеКонструктораПараметров - ссылка на текущий элемент класса <ПолеКонструктораПараметров>
//
Функция ПолеБулево(Знач ИмяПоля, ЗначениеПоУмолчанию = Ложь) Экспорт

	Возврат Поле(ИмяПоля, Тип("Булево"), ЗначениеПоУмолчанию);

КонецФункции

// Создает и возвращает новое поле-объект конструктора параметров
//
// Параметры:
//   ИмяПоля             - Строка - имя поля, возможно передача нескольких через пробел.
//   ОбъектПоля          - Объект.КонструкторПараметров - ссылка на объект поле
//
//  Возвращаемое значение:
//   Объект.ПолеКонструктораПараметров - ссылка на текущий элемент класса <ПолеКонструктораПараметров>
//
Функция ПолеОбъект(Знач ИмяПоля, Знач ОбъектПоля) Экспорт

	ТипПоля = Тип("КонструкторПараметров");

	Если НЕ Тип("КонструкторПараметров") = ТипЗнч(ОбъектПоля) Тогда
		ВызватьИсключение "Передан не корректный объект";
	КонецЕсли;

	Лог.Отладка("Добавляю поле объект <%1>, <%2>, <%3>", ИмяПоля, ТипПоля, ОбъектПоля.ПолучитьНаименованиеПараметров());

	Возврат Поле(ИмяПоля, ТипПоля, , , ОбъектПоля);

КонецФункции

// Создает и возвращает новое поле конструктора параметров
//
// Параметры:
//   ИмяПоля             - Строка - имя поля, возможно передача нескольких через пробел.
//   ТипПоля             - ОписаниеТипов - тип создаваемого поля
//   ЗначениеПоУмолчанию - Строка, Число, Дата, Неопределено - значение по умолчанию для поля
//   ТипЭлемента         - ОписаниеТипов - тип для элементов поля массив
//   ОбъектПоля          - Объект.КонструкторПараметров - ссылка на объект поле
//
//  Возвращаемое значение:
//   Объект.ПолеКонструктораПараметров - ссылка на текущий элемент класса <ПолеКонструктораПараметров>
//
Функция Поле(Знач ИмяПоля,
			 Знач ТипПоля = Неопределено,
			 Знач ЗначениеПоУмолчанию = Неопределено,
			 Знач ТипЭлемента = Неопределено,
			 Знач ОбъектПоля = "") Экспорт

	Если НЕ ЗначениеПоУмолчанию = Неопределено Тогда
		ТипПоля = ТипЗнч(ЗначениеПоУмолчанию);
	Иначе
		ТипПоля = Тип("Строка");
	КонецЕсли;

	НовоеПолеПараметров = Новый ПолеКонструктораПараметров(ЭтотОбъект,
														   ИмяПоля,
														   ТипПоля, 
														   ТипЭлемента,
														   ОбъектПоля);
	
	ДобавитьПолеВИндекс(НовоеПолеПараметров);
	НовоеПолеПараметров.УстановитьЗначение(ЗначениеПоУмолчанию);

	Настройки.Вставить(НовоеПолеПараметров, ЗначениеПоУмолчанию);

	Возврат НовоеПолеПараметров;

КонецФункции

Процедура ДобавитьПолеВИндекс(ПолеПараметров)
	
	ИндексПолей.Вставить(ПолеПараметров.Имя, ПолеПараметров);

	ДобавитьСинонимыПоляВИндекс(ПолеПараметров);

КонецПроцедуры

#КонецОбласти

#Область Работа_с_получением_значения_параметров

// <Описание функции>
//
// Параметры:
//   ИмяНастройки - <Тип.Вид> - <описание параметра>
//   ЗначениеПоУмолчанию - <Тип.Вид> - <описание параметра>
//
//  Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция Настройка(Знач ИмяНастройки, Знач ЗначениеПоУмолчанию = Неопределено) Экспорт

	ЗначениеИзИндекса = ЗначениеПоУмолчанию;

	Лог.Отладка("Получение значения настройки <%1>. Значение по умолчанию <%2>", ИмяНастройки, ЗначениеПоУмолчанию);
	Если Настройки.Свойство(ИмяНастройки, ЗначениеИзИндекса) Тогда
		Лог.Отладка(" --- получено значение <%1>", ЗначениеИзИндекса);
		Возврат ЗначениеИзИндекса;
	КонецЕсли;

	Возврат ЗначениеПоУмолчанию;

КонецФункции

#КонецОбласти

#Область Работа_с_чтением_и_выгрузкой_параметров

// <Описание функции>
//
//  Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция ВСтруктуру() Экспорт

	ИсходящаяСтруктура = Новый Структура;

	Для каждого КлючЗначение Из Настройки Цикл

		Значение = КлючЗначение.Значение;

		ЗначениеКлюча = ЗначениеВСтруктуру(Значение);

		ИсходящаяСтруктура.Вставить(КлючЗначение.Ключ, ЗначениеКлюча);

	КонецЦикла;

	Возврат ИсходящаяСтруктура;

КонецФункции

// <Описание функции>
//
//  Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция ВСоответствие() Экспорт
	
	СоответствиеРезультат = Новый Соответствие;

	Возврат СоответствиеРезультат;

КонецФункции

// <Описание функции>
//
//  Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция ИзСтруктуры() Экспорт
	
	Возврат ЭтотОбъект;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//   ВходящиеСоответствие - <Тип.Вид> - <описание параметра>
//
//  Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция ИзСоответствия(Знач ВходящиеСоответствие) Экспорт

	Лог.Отладка("Читаю настройки <%1>", НаименованиеПараметров);

	ПрочитатьИзСоответствия(ВходящиеСоответствие);

	ПоказатьНастройкиВРежимеОтладки(Настройки);

	Возврат ЭтотОбъект;

КонецФункции

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции

Функция НайтиПолеВИндексеПолей(Знач ИмяПоля)

	ИмяПоляВИндексе = ИндексСинонимовПолей[ИмяПоля];

	Лог.Отладка("Получено поля <%1> (<%2>)", ИмяПоляВИндексе, ИмяПоля);

	Если ИмяПоляВИндексе = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат ИндексПолей[ИмяПоляВИндексе];

КонецФункции

Процедура ДобавитьСинонимыПоляВИндекс(Знач ПолеПараметров)

	ИмяПоля = ПолеПараметров.Имя;

	Для каждого Синоним Из ПолеПараметров.Синонимы Цикл
		Лог.Отладка("Добавляю в индекс синоним <%1> для поля <%2>", Синоним, ИмяПоля);
		ИндексСинонимовПолей.Вставить(Синоним, ИмяПоля);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПолеПараметров(КлассОбъект)
	
	ИмяНастройки = Строка(ТипЗнч(КлассОбъект));

	РеализовываетИнтерфейсКонструктора(КлассОбъект);

	РефлекторОбъекта = Новый РефлекторОбъекта(КлассОбъект);
	
	Если РефлекторОбъекта.ЕстьФункция("ИмяНастройки") Тогда
		ИмяНастройки = КлассОбъект.ИмяНастройки();
	КонецЕсли;
	
	Если НастройкаЕстьВИндексе(ИмяНастройки) Тогда
		Возврат ИндексНастроек[ИмяНастройки];
	КонецЕсли;

	КонструкторПараметровКласса = НовыеПараметры(ИмяНастройки);
	
	КлассОбъект.ПолеПараметровараметров(КонструкторПараметровКласса);

	Возврат КонструкторПараметровКласса;
	
КонецФункции

Функция НастройкаЕстьВИндексе(Знач ИмяНастройки)
	Возврат НЕ ИндексНастроек[ИмяНастройки] = Неопределено;
КонецФункции

Процедура РеализовываетИнтерфейсКонструктора(КлассОбъект)

	РефлекторОбъекта = Новый РефлекторОбъекта(КлассОбъект);
	РефлекторОбъекта.РеализуетИнтерфейс(ИнтерфейсКонструктора, Истина);

КонецПроцедуры

Функция ЗначениеВСтруктуру(Значение)

	ТипЗначения = ТипЗнч(Значение);

	Если ТипЗначения = Тип("Массив") Тогда

		МассивЗначений = Новый Массив;

		Для Каждого ЭлМассива Из Значение Цикл

			МассивЗначений.Добавить(ЗначениеВСтруктуру(ЭлМассива));

		КонецЦикла;

		Возврат МассивЗначений;

	ИначеЕсли ТипЗначения = Тип("КонструкторПараметров") Тогда

		Возврат Значение.ВСтруктуру();

	Иначе

		Возврат Значение;

	КонецЕсли;

КонецФункции

Процедура ПрочитатьИзСоответствия(Знач ВходящиеСоответствие)

	Для каждого КлючЗначение Из ВходящиеСоответствие Цикл

		ИмяКлюча = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;
		Лог.Отладка("Загружаю поле <%1>, <%2>", ИмяКлюча, Значение);
		
		ПолеПараметров = НайтиПолеВИндексеПолей(ИмяКлюча);
				
		Если ПолеПараметров = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ЗначениеНастройки = ПреобразоватьЗначение(Значение, ПолеПараметров);

		Настройки.Вставить(ПолеПараметров.Имя, ЗначениеНастройки);

	КонецЦикла;

КонецПроцедуры

Функция ПреобразоватьЗначение(Значение, ПолеПараметров, ТипЗначения = Неопределено)

	Если ТипЗначения = Неопределено Тогда

		ТипЗначения = ПолеПараметров.Тип;

	КонецЕсли;
	
	Лог.Отладка("Тип значение <%1> = <%2>", ТипЗначения, ТипЗнч(Значение));

	Если ТипЗначения = Тип("Строка") Тогда

		Возврат Строка(Значение);

	ИначеЕсли ТипЗначения = Тип("Дата") Тогда

		// TODO: НЕ работает преобразование в дату
		Возврат СтрокаВДату(Значение, "dd/MM/yy hh:mm:ss tt");
	
	ИначеЕсли ТипЗначения = Тип("Число") Тогда

		Возврат Число(Значение);

	ИначеЕсли ТипЗначения = Тип("Булево") Тогда

		Возврат Булево(Значение);

	ИначеЕсли ПолеПараметров.ЭтоМассив Тогда

		Возврат ПреобразоватьМассив(Значение, ПолеПараметров);

	ИначеЕсли ПолеПараметров.ЭтоОбъект Тогда

		Возврат ОбъектНастройка.ИзСоответствия(Значение);
	
	Иначе

		ВызватьИсключение СтрШаблон("Не правильный тип настройки поля <%1>", Строка(ТипЗначения));

	КонецЕсли;

КонецФункции

Функция ПреобразоватьМассив(ВходящийМассив, ПолеПараметров)

	МассивЗначений = Новый Массив;
	ТипЭлементовМассива = ПолеПараметров.ТипЭлемента;
	
	Лог.Отладка("Обрабатываю массив");
		
	Для каждого ЭлементМассива Из ВходящийМассив Цикл
		
		МассивЗначений.Добавить(ПреобразоватьЗначение(ЭлементМассива, ПолеПараметров, ТипЭлементовМассива));

	КонецЦикла;

	Возврат МассивЗначений;

КонецФункции

Процедура ПоказатьНастройкиВРежимеОтладки(ЗначенияПараметров, Знач Родитель = "")
	
	Если Родитель = "" Тогда
		Лог.Отладка("	Тип параметров %1", ТипЗнч(ЗначенияПараметров));
	КонецЕсли;
	
	Если ЗначенияПараметров.Количество() = 0 Тогда
		Лог.Отладка("	Коллекция параметров пуста!");
	КонецЕсли;

	Если ЗначенияПараметров = Тип("Массив") Тогда
		
		Для ИИ = 0 По ЗначенияПараметров.ВГраница() Цикл
			ПоказатьНастройкиВРежимеОтладки(ЗначенияПараметров[ИИ], СтрШаблон("%1.%2", Родитель, ИИ));
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(ЗначенияПараметров) = Тип("Структура")
		ИЛИ ТипЗнч(ЗначенияПараметров) = Тип("Соответствие") Тогда
	
		Для каждого Элемент Из ЗначенияПараметров Цикл
	
			Если Не ПустаяСтрока(Родитель) Тогда
				ПредставлениеКлюча  = СтрШаблон("%1.%2", Родитель, Элемент.Ключ);
			Иначе
				ПредставлениеКлюча = Элемент.Ключ;
			КонецЕсли;
		
			Если ТипЗнч(Элемент.Значение) = Тип("КонструкторПараметров") Тогда
		
				ПоказатьНастройкиВРежимеОтладки(Элемент.Значение.ВСтруктуру(), ПредставлениеКлюча);
		
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") 
				ИЛИ ТипЗнч(Элемент.Значение) = Тип("Соответствие")  Тогда
		
				ПоказатьНастройкиВРежимеОтладки(Элемент.Значение, ПредставлениеКлюча);	

			Иначе
				Лог.Отладка("	параметр <%1> = <%2>", ПредставлениеКлюча, Элемент.Значение);
		
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ПриСозданииОбъекта(ВходящийИндексНастроек, Знач НовоеНаименованиеПараметров)

	НаименованиеПараметров = НовоеНаименованиеПараметров;
	Настройки = Новый Структура;
	ИндексПолей = Новый Соответствие;
	ИндексСинонимовПолей = Новый Соответствие;
	ИндексНастроек = ВходящийИндексНастроек;

	Если ИндексНастроек = Неопределено Тогда
		ИндексНастроек = Новый Соответствие;
	КонецЕсли;

	ИндексНастроек.Вставить(НаименованиеПараметров, ЭтотОбъект);

	ИнтерфейсКонструктора = Новый ИнтерфейсОбъекта;
	ИнтерфейсКонструктора.ПроцедураИнтерфейса("ПолеПараметровараметров", 1);

	ИнтерфейсПриемника = Новый ИнтерфейсОбъекта;
	ИнтерфейсПриемника.ПроцедураИнтерфейса("УстановитьНастройки", 1);

КонецПроцедуры

// Процедура СтрокаВДату преобразует строку в дату по шаблону форматной строки
//
// Параметры
//  Строка		- строка, содержащая дату,
//  ФорматДаты	- форматная строка вида:
// [dd MM yy]
// [yy-MM-dd HH:mm]
// [dd MM yy HH mm ss]
// [dd MM yyyy]
// [MM dd, yyyy, HH:mm]
// [dd.MM.yy]
// [MM, dd, yyyy]
// [yyyyMMdd]
// [HH-mm-ss, dd-MM-yy]
// [dd]
// [dd MM HH:mm:ss yyyy]
// [HH:mm:ss]
// [HH:mm]
// [yyyy-MM-dd HH:mm:ss]
// [yyyy-MM-dd]
// [yyyy/MM/dd]
// [dd/MM/yy]
// [MM dd yyyy]
// [yyyy-MM]
// [yyyy]
// [MM, dd, yyyy]
// [dd-MM-yyyy]
// [ddMMyyyy]
//
Функция СтрокаВДату(Знач Строка, ФорматДаты)
	Ч = Новый Соответствие; 
	Для ё = 1 По СтрДлина(ФорматДаты) + 6 Цикл 
	    Ч[Сред(ФорматДаты + "dMyHms", ё, 1)] = 0;
	КонецЦикла; 
	Для ё = 1 По СтрДлина(ФорматДаты) Цикл 
	    Ч[Сред(ФорматДаты, ё, 1)] = 10 * Ч[Сред(ФорматДаты, ё, 1)] + Найти("123456789", Сред(Строка, ё, 1));
	КонецЦикла; 
	Ч["y"] = Ч["y"] + ?(0 < Ч["y"] И Ч["y"] < 50, 2000, ?(0 < Ч["y"] И Ч["y"] < 100, 1900, 0));
	Возврат Дата(Макс(Ч["y"], 1), Макс(Ч["M"],1), Макс(Ч["d"],1), Ч["H"], Ч["m"], Ч["s"]);
КонецФункции 

#КонецОбласти

Лог = Логирование.ПолучитьЛог("oscript.lib.configor.constructor");
