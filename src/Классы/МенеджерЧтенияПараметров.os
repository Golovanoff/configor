Перем МассивПутейПоиска;
Перем ПутьКФайлуПараметров;
Перем ИмяФайлаПараметров;
Перем РасширениеФайлаПараметров;
Перем КлассЧтенияФайлаПараметров;

Перем ИндексПараметров; // Соответствие 
Перем ПрочитанныеПараметры; // Соответствие

Перем КлассПриемникПараметров; // Произвольный класс обеспечивающий: Функция Параметры() Экспорт, Процедура УстановитьПараметры(НовыеПараметры) Экспорт 

Процедура ПриСозданииОбъекта()

	МассивПутейПоиска = Новый Массив;

	ДобавитьСтандартныеПутиПоиска();
	
	ИндексПараметров = Новый Соответствие;
	ПрочитанныеПараметры = Новый Структура;
	
	ЧтениеФайлаПараметровВыполнено = Ложь; 

КонецПроцедуры

Процедура УстановитьФайлПараметров(Знач ПутьКФайлу) Экспорт

	ПутьКФайлуПараметров = ПутьКФайлу;
	
КонецПроцедуры

Процедура УстановитьСинонимыПараметров(Знач СинонимовПараметров) Экспорт

	ИндексСинонимовПараметров = СинонимовПараметров;
	
КонецПроцедуры

Процедура ДобавитьПутьПоиска(Знач ПутьПоискаФайлов) Экспорт
	
	МассивПутейПоиска.Добавить(ПутьПоискаФайлов);

КонецПроцедуры

//
Функция ИспользуемыйФайлПараметров() Экспорт
	Возврат ПолучитьПутьКФайлуПараметров();
КонецФункции

Процедура УстановитьИмяФайла(Знач ИмяФайла) Экспорт
	
	ИмяФайлаПараметров = ИмяФайла;

КонецПроцедуры

Процедура УстановитьРасширениеФайла(Знач РасширениеФайла, Знач КлассЧтенияФайла = Неопределено) Экспорт
	
	РасширениеФайлаПараметров = РасширениеФайла;

	Если Не КлассЧтенияФайла = Неопределено Тогда
		
		КлассЧтенияФайлаПараметров = КлассЧтенияФайла;

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьКлассПриемник(КлассПараметров) Экспорт

	КлассПриемникПараметров = КлассПараметров;

КонецПроцедуры

Процедура Прочитать() Экспорт

	НайтиИУстановитьФайлПараметров();

	ПрочитанныеПараметры = КлассЧтенияФайлаПараметров.Прочитать(ИмяФайлаПараметров);
 
	ОбновитьИндексПараметров();

	ЧтениеФайлаПараметровВыполнено = Истина;

	СформироватьПрочитанныеПараметры();

КонецПроцедуры

Процедура ОбновитьИндексПараметров()
	
	// Рекурсивный вызов для входящих параметров
	ДобавитьЗначениеПараметра("", ПрочитанныеПараметры);
	
КонецПроцедуры

Функция ЭтоМассив(Знач Значение)
	Возврат ТипЗнч(Значение) = Тип("Массив");
КонецФункции

Функция ЭтоСоответствие(Знач Значение)
	Возврат ТипЗнч(Значение) = Тип("Соответствие");	
КонецФункции

Функция ЭтоСтруктура(Знач Значение)
	Возврат ТипЗнч(Значение) = Тип("Структура");	
КонецФункции

Процедура ДобавитьПараметрВИндекс(Знач ИмяПараметра, Знач ЗначениеПараметра)
	
	// Вставляем все значение целиком
	// Для получения массивов и соответствий сразу
	ИндексПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);

	// Рекурсивное заполнение значения параметра
	ДобавитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры

Процедура ДобавитьЗначениеПараметра(Знач ИмяПараметра, Знач ЗначениеПараметра)
	
	Если ЭтоМассив(ЗначениеПараметра) Тогда
		ДобавитьПараметрМассивВИндекс(ЗначениеПараметра, ИмяПараметра);
	ИначеЕсли ЭтоСоответствие(ЗначениеПараметра) Тогда
		ДобавитьСоответствиеВИндекс(ЗначениеПараметра, ИмяПараметра);
	ИначеЕсли ЭтоСтруктура(ЗначениеПараметра) Тогда
		ДобавитьСоответствиеВИндекс(ЗначениеПараметра, ИмяПараметра);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПараметрМассивВИндекс(Знач МассивЗначений, Знач ИмяРодителя = "")
	
	ШаблонИмениПараметра = "%1";
	
	Если Не ПустаяСтрока(ИмяРодителя) Тогда
		ШаблонИмениПараметра = ИмяРодителя + ".%1";
	КонецЕсли;

	Для ИндексЗначения = 0 По МассивЗначений.ВГраница() Цикл
		
		ИмяПараметра = СтрШаблон(ШаблонИмениПараметра, ИндексЗначения);
		ДобавитьПараметрВИндекс(ИмяПараметра, МассивЗначений[ИндексЗначения]); 

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьСоответствиеВИндекс(Знач ВходящиеПараметры, Знач ИмяРодителя = "")
	
	ШаблонИмениПараметра = "%1";
	
	Если Не ПустаяСтрока(ИмяРодителя) Тогда
		ШаблонИмениПараметра = ИмяРодителя + ".%1";
	КонецЕсли;

	Для каждого КлючЗначение Из ВходящиеПараметры Цикл
		
		ИмяПараметра = СтрШаблон(ШаблонИмениПараметра, КлючЗначение.Ключ);
		ЗначениеПараметра = КлючЗначение.Значение;
		
		ДобавитьПараметрВИндекс(ИмяПараметра, ЗначениеПараметра); 

	КонецЦикла;

КонецПроцедуры

Процедура СформироватьПрочитанныеПараметры()
	
КонецПроцедуры

Процедура НайтиИУстановитьФайлПараметров()

	Если ЗначениеЗаполнено(ИмяФайлаПараметров) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПутьПоиска Из МассивПутейПоиска Цикл
		
		// TODO Реализовать поиск файла по имени и расширению
		НайденныйФайл = "";

	КонецЦикла;

	Если РасширениеФайлаПараметров = НайденныйФайл.Расширение Тогда
		КлассЧтенияФайла = КлассЧтенияФайлаПараметров;
	Иначе
		КлассЧтенияФайла = ПолучитьОбработчикПоРасширению(НайденныйФайл.Расширение);
	КонецЕсли;
	
	УстановитьФайлПараметров(НайденныйФайл.ПолноеИмя);

	РасширениеФайлаПараметров = НайденныйФайл.Расширение;
	КлассЧтенияФайлаПараметров = КлассЧтенияФайла;

КонецПроцедуры

Функция Параметр(Знач ИмяПараметра, Знач ЗначениеПоУмолчанию = Неопределено) Экспорт

	СообщениеОшибки = "Получение значений возможно только после вызова метода Прочитать";
	Ожидаем.Что(ЧтениеФайлаПараметровВыполнено, СообщениеОшибки).Истина();

	ЗначениеИзИндекса = ИндексПараметров[ИмяПараметра];
	
	Если НЕ ЗначениеИзИндекса = Неопределено Тогда
		Возврат ЗначениеИзИндекса;
	КонецЕсли;

	Возврат ЗначениеПоУмолчанию;

КонецФункции

Функция ПолучитьОбработчикПоРасширению(Знач РасширениеФайла)

	Если НРег(РасширениеФайла) = "yaml" Тогда
		Возврат Новый ЧтениеПараметровYAML();
	ИначеЕсли НРег(РасширениеФайла) = "json" Тогда
		Возврат Новый ЧтениеПараметровJSOn();
	Иначе
		ВызватьИсключение "Расширение данного файла не поддерживаться для чтения";
	КонецЕсли;

КонецФункции

Процедура ПроверитьКлассЧтенияФайлаПараметров()
	// TODO Проверка на функцию КлассЧтенияФайлаПараметров.ПрочитатьФайл(ИмяФайла) Экспорт

	НеобходимыйИнтерфейсЕсть = Истина;

	Если НЕ НеобходимыйИнтерфейсЕсть Тогда
		ВызватьИсключение СтрШаблон("Класс <%1> не реализует необходимой функции <%2>", КлассЧтенияФайлаПараметров , "ПрочитатьФайл(ИмяФайла)" );
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьПараметрыВКлассПриемник()

	СтруктураПараметров = КлассПриемникПараметров.ПолучитьПараметры();	

	ЗаполнитьСтруктуруПараметров(СтруктураПараметров);

	КлассПриемникПараметров.УстановитьПараметры(СтруктураПараметров);

КонецПроцедуры

Процедура ДобавитьЗначениеВСтруктуру(СтруктураПриемник, Знач ИмяПараметра, Знач ЗначениеПараметра)
	
	
КонецПроцедуры

Процедура ДобавитьСоответствиеВСтруктуру(Знач ВходящиеПараметры, Знач ИмяРодителя = "")
	
	ШаблонИмениПараметра = "%1";
	
	Если Не ПустаяСтрока(ИмяРодителя) Тогда
		ШаблонИмениПараметра = ИмяРодителя + ".%1";
	КонецЕсли;

	Для каждого КлючЗначение Из ВходящиеПараметры Цикл
		
		ИмяПараметра = СтрШаблон(ШаблонИмениПараметра, КлючЗначение.Ключ);
		ЗначениеПараметра = КлючЗначение.Значение;
		
		ДобавитьПараметрВИндекс(ИмяПараметра, ЗначениеПараметра); 

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтруктуруПараметров(СтруктураПараметров, Знач ИмяРодителя = "")

	ЕстьОбработчикПолученияЗначения = Ложь; //  Проверить на доступный метод ПриПолученииЗначения(ИмяСвойства, ЗначениеСвойства, СтандартнаяОбработка)
	ШаблонИмениПараметра = "%1";
	
	Если Не ПустаяСтрока(ИмяРодителя) Тогда
		ШаблонИмениПараметра = ИмяРодителя + ".%1";
	КонецЕсли;

	Для каждого КлючЗначение Из СтруктураПараметров Цикл
		
		ИмяКлюча = КлючЗначение.Ключ;
		ТекущееЗначение = КлючЗначение.Значение;
		
		ИмяПараметра = СтрШаблон(ШаблонИмениПараметра, ИмяКлюча);
		
		НовоеЗначение = Параметр(ИмяПараметра);

		Если НовоеЗначение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		Если ЭтоМассив(ТипТекущегоЗначения) 
			И ЭтоМассив(НовоеЗначение) Тогда
			
			НовоеЗначение = ОбработатьКлючМассивВСтруктуру(МассивЗначений, ИмяКлюча);
		
		ИначеЕсли ЭтоСоответствие(ТипТекущегоЗначения) 
				И ЭтоСоответствие(НовоеЗначение) Тогда
		
		ИначеЕсли ЭтоСтруктура(ТипТекущегоЗначения) 
				И ЭтоСтруктура(НовоеЗначение) Тогда
			
		Иначе
			СтруктураПараметров[ИмяКлюча] = НовоеЗначение;
		КонецЕсли;


		СтандартнаяОбработка = Истина;



		Если СтандартнаяОбработка Тогда
					
			СтруктураПараметров[ИмяКлюча] = НовоеЗначение;

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры


Функция ОбработатьЗначениеРекурсивно(Знач ЗначениеСтруктуры, Знач ЗначениеПараметра, Знач ИмяПараметра = "")
	
	НовоеЗначение = Параметр(ИмяПараметра);

	Если НовоеЗначение = Неопределено Тогда
		Возврат ЗначениеСтруктуры;
	КонецЕсли;

	Если ЭтоМассив(ЗначениеСтруктуры) Тогда
		Возврат ОбработатьЗначениеМассив(ЗначениеСтруктуры, ЗначениеПараметра, ИмяПараметра);
	ИначеЕсли ЭтоСоответствие(ЗначениеСтруктуры) Тогда
		Возврат ОбработатьЗначениеСоответствие(ЗначениеПараметра, ИмяПараметра);
	ИначеЕсли ЭтоСтруктура(ЗначениеСтруктуры) Тогда
		Возврат ОбработатьЗначениеСтруктуру(ЗначениеПараметра, ИмяПараметра);
	КонецЕсли;

КонецФункции

Функция ОбработатьЗначениеМассив(Знач ЗначениеСтруктуры, Знач МассивЗначений, Знач ИмяРодителя = "")
	
	ШаблонИмениПараметра = "%1";
	
	Если Не ПустаяСтрока(ИмяРодителя) Тогда
		ШаблонИмениПараметра = ИмяРодителя + ".%1";
	КонецЕсли;

	Для ИндексЗначения = 0 По МассивЗначений.ВГраница() Цикл
		
		ИмяПараметра = СтрШаблон(ШаблонИмениПараметра, ИндексЗначения);
		ОбработатьЗначениеРекурсивно(ЗначениеСтруктуры, ИмяПараметра, МассивЗначений[ИндексЗначения]); 

	КонецЦикла;

КонецФункции

Функция ПолучитьПутьКФайлуПараметров()
	
	ФайлПараметров = Новый Файл(ПутьКФайлуПараметров);

	Если ФайлПараметров.Существует() Тогда
		Возврат ФайлПараметров.ПолноеИмя;
	Иначе 
		Возврат "";
	КонецЕсли;

КонецФункции

Процедура ДобавитьСтандартныеПутиПоиска()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;

	МассивПутейПоиска.Добавить(ТекущийКаталог());
	МассивПутейПоиска.Добавить(СистемнаяИнформация.ПолучитьПутьПапки(СпециальнаяПапка.ЛокальныйКаталогДанныхПриложений));
	//МассивПутейПоиска.Добавить(ТекущийКаталог());

КонецПроцедуры

Процедура ОчиститьСтандартныеПутиПоиска()
	
	МассивПутейПоиска.Очистить();

КонецПроцедуры