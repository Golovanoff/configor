#Использовать reflector

Перем ТипПровайдера Экспорт; // Файл, Произвольный
Перем Приоритет Экспорт; // Число
Перем Идентификатор Экспорт; // Строка
Перем Включен Экспорт; // Булево

Перем КлассПровайдера; // Произвольный класс
Перем РеализованИнтерфейсЗаписи; // Булево
Перем РеализованИнтерфейсЧтения; // Булево

// Выполняет чтение параметров для провайдера
//
// Параметры:
//   НастройкиПровайдера - Структура - структура настроек провайдера
//
//  Возвращаемое значение:
//   Соответствие - результат чтения провайдера
//
Функция ПрочитатьПараметры(Знач НастройкиПровайдера) Экспорт

	Если Не Включен Тогда
		Возврат Новый Соответствие;
	КонецЕсли;

	Если НЕ РеализованИнтерфейсЧтения Тогда
		Возврат Новый Соответствие;
	КонецЕсли;

	Возврат КлассПровайдера.ПрочитатьПараметры(НастройкиПровайдера);
	
КонецФункции

// Отключает использование провайдера
//
Процедура Отключить() Экспорт
	Включен = Ложь;
КонецПроцедуры

// Включает использование провайдера
//
Процедура Включить() Экспорт
	Включен = Истина;
КонецПроцедуры

// Устанавливает приоритет провайдера
//
// Параметры:
//   НовыйПриоритет - Число - новый приоритет провайдера
//
Процедура УстановитьПриоритет(Знач НовыйПриоритет) Экспорт
	Приоритет = НовыйПриоритет;
КонецПроцедуры

// Выполняет запись данных провайдера
//
// Параметры:
//   НастройкиПровайдера - Структура - структура настроек провайдера
//
Процедура ЗаписатьПараметры(Знач НастройкиПровайдера) Экспорт

	Если Не Включен Тогда
		Возврат;
	КонецЕсли;

	Если НЕ РеализованИнтерфейсЗаписи Тогда
		Возврат;
	КонецЕсли;

	КлассПровайдера.ЗаписатьПараметры(НастройкиПровайдера);
	
КонецПроцедуры

// Возвращает признак того, что провайдер является файловым
//
//  Возвращаемое значение:
//   Булево - признак того, что данный провайдер является файловым
//
Функция ЭтоФайловыйПровайдер() Экспорт

	Возврат ВРег(ТипПровайдера) = ВРег("Файл")
		ИЛИ ВРег(ТипПровайдера) = ВРег("file");

КонецФункции

Процедура ПриСозданииОбъекта(Знач ВходящийКлассПровайдера)
	
	ИнтерфейсПровайдера = Новый ИнтерфейсОбъекта;
	ИнтерфейсПровайдера.Ф("Приоритет");
	ИнтерфейсПровайдера.Ф("Идентификатор");
	ИнтерфейсПровайдера.Ф("ТипПровайдера");

	ИнтерфейсЧтения = Новый ИнтерфейсОбъекта;
	ИнтерфейсЧтения.Ф("ПрочитатьПараметры", 1);

	ИнтерфейсЗаписи = Новый ИнтерфейсОбъекта;
	ИнтерфейсЗаписи.Ф("ЗаписатьПараметры", 1);

	РефлекторОбъекта = Новый РефлекторОбъекта(ВходящийКлассПровайдера);
	
	РеализованИнтерфейсЧтения = РефлекторОбъекта.РеализуетИнтерфейс(ИнтерфейсЧтения);
	РеализованИнтерфейсЗаписи = РефлекторОбъекта.РеализуетИнтерфейс(ИнтерфейсЗаписи);
	РеализованИнтерфейсПровайдера = РефлекторОбъекта.РеализуетИнтерфейс(ИнтерфейсПровайдера);

	ПроверкаПровайдера = РеализованИнтерфейсПровайдера 
							И (РеализованИнтерфейсЧтения 
							ИЛИ РеализованИнтерфейсЗаписи);
	
	Если НЕ ПроверкаПровайдера Тогда
		// TODO: Добавить описание того что реализовано а что нет
		ВызватьИсключение "Не реализован необходимый интерфейс провайдера";
	КонецЕсли;

	ТипПровайдера = ВходящийКлассПровайдера.ТипПровайдера();
	
	Если ЭтоФайловыйПровайдер() Тогда
		КлассПровайдера = Новый ФайловыйПровайдерПараметров(ВходящийКлассПровайдера);	
	Иначе
		КлассПровайдера = ВходящийКлассПровайдера;
	КонецЕсли;
	
	Приоритет = КлассПровайдера.Приоритет();
	Идентификатор = КлассПровайдера.Идентификатор();
	Включен = Истина;

КонецПроцедуры
