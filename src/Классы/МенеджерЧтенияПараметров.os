Перем МассивПутейПоиска;
Перем ПутьКФайлуПараметров;
Перем ИмяФайлаПараметров;
Перем РасширениеФайлаПараметров;
Перем КлассЧтенияФайлаПараметров;
Перем ИндексПараметров; // Соответствие 
Перем ПрочитанныеПараметры; // Структура

Перем ИндексСинонимовПараметров; // Соответствие

Перем КлассПриемникПараметров; // Произвольный класс обеспечивающий; Функция Параметры() Экспорт, Процедура УстановитьПараметры(НовыеПараметры) Экспорт 

Процедура ПриСозданииОбъекта()

	МассивПутейПоиска = Новый Массив;

	ДобавитьСтандартныеПутиПоиска();
	
	ИндексПараметров = Новый Соответствие;
	ПрочитанныеПараметры = Новый Структура;
	ИндексСинонимовПараметров = Новый Соответствие;

КонецПроцедуры

Процедура УстановитьФайлПараметров(Знач ПутьКФайлу) Экспорт

	ПутьКФайлуПараметров = ПутьКФайлу;
	
КонецПроцедуры

Процедура ДобавитьПутьПоиска(Знач ПутьПоискаФайлов) Экспорт
	
	МассивПутейПоиска.Добавить(ПутьПоискаФайлов);

КонецПроцедуры
//
Функция ИспользуемыйФайлПараметров() Экспорт
	Возврат ПолучитьПутьКФайлуПарамтеров();
КонецФункции

Процедура УстановитьИмяФайла(Знач ИмяФайла) Экспорт
	
	ИмяФайлаПараметров = ИмяФайла;

КонецПроцедуры

Процедура УстановитьРасширениеФайла(Знач РасширениеФайла, Знач КлассЧтенияФайла = Неопределено) Экспорт
	
	РасширениеФайлаПараметров = РасширениеФайла;

	Если Не КлассЧтенияФайла = Неопределено Тогда
		
		КлассЧтенияФайлаПараметров = КлассЧтенияФайла;

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьКлассПриемник(КлассПараметров) Экспорт

	КлассПриемникПараметров = КлассПараметров;

КонецПроцедуры

Процедура Прочитать() Экспорт

	НайтиИУстановитьФайлПараметров();

	СоответствиеПараметров = КлассЧтенияФайлаПараметров.Прочитать(ИмяФайлаПараметров);


КонецПроцедуры

Процедура НайтиИУстановитьФайлПараметров()

	Если ЗначениеЗаполнено(ИмяФайлаПараметров) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПутьПоиска Из МассивПутейПоиска Цикл
		
		// TODO Реализовать поиск файла по имени и расширению
		НайденныйФайл = "";

	КонецЦикла;

	Если РасширениеФайлаПараметров = НайденныйФайл.Расширение Тогда
		КлассЧтенияФайла = КлассЧтенияФайлаПараметров;
	Иначе
		КлассЧтенияФайла = ПолучитьОбработчикПоРасширению(НайденныйФайл.Расширение);
	КонецЕсли;
	
	УстановитьФайлПараметров(НайденныйФайл.ПолноеИмя);

	РасширениеФайлаПараметров = НайденныйФайл.Расширение;
	КлассЧтенияФайлаПараметров = КлассЧтенияФайла;

КонецПроцедуры

Функция Параметр(Знач ИмяПараметра, Знач ЗначениеПоУмолчанию = Неопределено) Экспорт

	ЗначениеИзИндекса = ИндексПараметров[ИмяПараметра];

	Если ЗначениеИзИндекса = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат ЗначениеИзИндекса;

КонецФункции

Функция ПолучитьОбработчикПоРасширению(Знач РасширениеФайла)

	Если НРег(РасширениеФайла) = "yaml" Тогда
		Возврат Новый ЧтениеПараметровYAML();
	ИначеЕсли НРег(РасширениеФайла) = "json" Тогда
		Возврат Новый ЧтениеПараметровJSOn();
	Иначе
		ВызватьИсключение "Расширение данного файла не поддерживаться для чтения";
	КонецЕсли;

КонецФункции

Процедура ПроверитьКлассЧтенияФайлаПараметров()
	// TODO Проверка на функцию КлассЧтенияФайлаПараметров.ПрочитатьФайл(ИмяФайла) Экспорт

	НеобходимыйИнтерфейсЕсть = Истина;

	Если НЕ НеобходимыйИнтерфейсЕсть Тогда
		ВызватьИсключение СтрШаблон("Класс <%1> не реализует необходимой функции <%2>", КлассЧтенияФайлаПараметров , "ПрочитатьФайл(ИмяФайла)" );
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьПараметрыВКлассПриемник()

	СкопированныеПараметры = СкопироватьСтруктуруПараметров(ПрочитанныеПараметры);

	КлассПриемникПараметров.УстановитьПараметры(СкопированныеПараметры);

КонецПроцедуры

Функция СкопироватьСтруктуруПараметров(ТекущиеПараметры)

	Возврат ТекущиеПараметры;
	// Код рекурсивного копирования

КонецФункции

Функция ПолучитьПутьКФайлуПарамтеров()
	
	ФайлПараметров = Новый Файл(ПутьКФайлуПараметров);

	Если ФайлПараметров.Существует() Тогда
		Возврат ФайлПараметров.ПолноеИмя;
	Иначе 
		Возврат "";
	КонецЕсли;

КонецФункции

Процедура ДобавитьСтандартныеПутиПоиска()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;

	МассивПутейПоиска.Добавить(ТекущийКаталог());
	МассивПутейПоиска.Добавить(СистемнаяИнформация.ПолучитьПутьПапки(СпециальнаяПапка.ЛокальныйКаталогДанныхПриложений));
	//МассивПутейПоиска.Добавить(ТекущийКаталог());

КонецПроцедуры

Процедура ОчиститьСтандартныеПутиПоиска()
	
	МассивПутейПоиска.Очистить();

КонецПроцедуры